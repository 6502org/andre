<!DOCTYPE webpage [ <!ENTITY eacute "&#233; "> <!ENTITY nbsp "&#160;"> ]>
<webpage name="GeckOS/A65 V2.1">
  <author>
    <name>Andr&eacute; Fachat</name> 
    <email>@EMAIL@</email>
    <homepage>@WEBROOT@</homepage>
    <yearstart>1989</yearstart>
    <yearend>2024</yearend>
  </author>
  <keywords>6502,operating system</keywords>
  <metadesc>OS/A65 Version 2.2</metadesc>
  <overview><p>	This is my 6502 multitasking operating system GeckOS/A65.
</p>
<img src="../imgs/GeckOS-logo2.png"/>

<p>
News in version 2.2 are:</p>
<ul>
<li>New port: the Commodore C128 can now run GeckOS</li>
<li>lsh got job control</li>
<li>NMI-based RS232 esp. for the C64 swiftlink</li>
</ul>
<p>More details can be found in the <a href="https://github.com/fachat/GeckOS-V2/blob/master/RELEASE.adoc">RELEASE notes</a>.</p>

<p>
News in version 2.1.1 are:</p>
<ul>
<li>Adaption to and requirement for xa 2.4.1</li>
</ul>

<p>
News in version 2.1 are:</p>
<ul>
<li>An official Logo!</li>
<li>All documentation is updated and re-written in asciidoc</li>
<li>Usability updates on various commands and APIs like <code>ps(1)</code>, <code>setinfo(2)</code>, <code>ls(1)</code>, and pipe filters like <code>hexdump</code>, <code>wc</code>, or <code>more</code>.</li>
<li>Added first contributed code - <code>kill(1)</code> by Glenn Holmer!</li>
<li>Grand shell unification. <code>lsh(1)</code> is now the one and official shell; the old monitor from <code>sh</code> now becomes <code>lmon(1)</code>.</li>
<li>Various improvements in the different ports</li>
</ul>
<p>
Since version 2.0 on it has a lot of new features over 1.x:</p>
<ul>
<li>multithreading</li>
<li>dynamic memory management</li>
<li>relocatable fileformat</li>
<li>lib6502 standard library</li>
<li>internet support</li>
</ul>
  </overview>
  <news>
    <item date="2024-02-06">
	Updated this page to version 2.1.1 
    </item>
    <item date="2021-10-18">
	Updated this page to finally include a link to GeckOS' github page :-)
    </item>
    <item date="2013-10-06">
	Updated GeckOS to 2.0.9
    </item>
    <item date="2010-01-04">
	Started this page
    </item>
  </news>
  <toc/>
  <section toc="download" name="Download">
    <desc>
	<p>
	The current development is done on github: <a class="extlink" target="_blank" href="https://github.com/fachat/GeckOS-V2">https://github.com/fachat/GeckOS-V2</a>.
	There you also find the older versions as source tree (check the git tags)
	</p>
<p>
The git repo now contains, for the supported architectures, d64 disk images that are ready to boot (not all architectures support all options, e.g. tcp/ip) in the arch/*/boot subdirectory.
</p>
<ul>
<li><a href="https://github.com/fachat/GeckOS-V2/raw/master/arch/c64/boot/osa.d64">C64 osa.d64</a> D64 file for C64 emulators.
Start with "x64 -8 osa.d64". Documentation is in the <a href="https://github.com/fachat/GeckOS-V2/blob/master/doc/c64.p.adoc">C64 port adoc</a>.</li>
<li><a href="https://github.com/fachat/GeckOS-V2/raw/master/arch/cbm8x96/boot/osa.d64">cbm8x96 osa.d64</a> D64 file for the VICE xpet emulator. 
Start with "xpet -8 cbm8x96.d64 -model 8296". Documentation is in the <a href="https://github.com/fachat/GeckOS-V2/blob/master/doc/cbm8x96.p.adoc">8x96 port adoc</a>.</li>
<li><a href="https://github.com/fachat/GeckOS-V2/raw/master/arch/pet32k/boot/osa.d64">8032 PET osa.d64</a> D64 file for the VICE xpet emulator.
Start with "xpet -8 pet32k.d64 -model 8032". Documentation in the <a href="https://github.com/fachat/GeckOS-V2/blob/master/doc/pet32k.p.adoc">PET 32k adoc</a>.</li>
<li>CS/A65 osa.d64 for the <a href="https://github.com/fachat/xcbm">XCBM emulator</a> for my <a href="../csa/index.html">CS/A65</a> PET clone - is not yet available as xcbm does not yet support disk images. You have to start xcsa in the boot folder of the git repo (after checkout and building). Documentation is in the <a href="https://github.com/fachat/GeckOS-V2/blob/master/doc/csa65.p.adoc">CS/A port adoc</a>.</li>
</ul><p>
After starting the emulators do a `LOAD"LOADER",8' and then `RUN'. This
should do it. On the C64 and the 8x96 PET you have a libshell (lsh) and an old-style shell/monitor
coming up on two different virtual consoles. The standard 32k PET only runs a libshell.
You can switch between consoles with different key combinations, pls see the ports file (or if in doubt the PET 32k file) for specific keys for each platform.
</p>
<p>Watch a small demo video here</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/R0uLi5icnoE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="1"></iframe>
<iframe width="560" height="315" src="https://www.youtube.com/embed/bHzGebcG9i8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="1"></iframe>
<iframe width="560" height="315" src="https://www.youtube.com/embed/jtlAOdJmeDI?si=4DXIJdk6YpBC30KJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="1"></iframe>
    </desc>
  </section>

  <section toc="desc" name="Description">
    <desc> 
<p>
OS/A65 is a full-featured Multitasking/Multithreading operating system
for the 6502. It is preemptive and implements some Unix-like features,
like signals, semaphores,
<a href="../o65/index.html">relocatable fileformat</a>,
<a href="../lib6502/index.html">standard library</a>, internet support via
a kind of simplified sockets and last but not least virtual consoles.
</p><p>
It is extremly scalable. Stripped down to the scheduler and interrupt
handling the kernel is only slightly above 2k. In normal
<a href="embedded.html">embedded systems</a>
the kernel has around 4k, with only application programs running.
Full featured systems have a 4k kernel, and several support tasks
provided system services like TCP/SLIP and (different) filesystems.
</p><p>
The kernel is almost completely hardware independent. All the
architecture-specific stuff is in a separate subdirectory
for each architecture.
</p><p>
The <a href="lib6502.html">lib6502</a> as standard library allows easy
access to the system services. Parts of this library are already
implemented in another 6502 operating system, Lunix by Daniel Dallmann.
This way source code compatibility is achieved.
</p><p>
Version 2.0.0 features a "slipd" server process that brings easy internet
access to all lib6502 programs, that can now access TCP connections
like files. A stable WWW server running on the OS is built into the
slipd daemon. Also a remote login can be done. This way the OS can run
programs to for example read sensors and write the stuff to files, which
are exported by the WWW server.
</p><p>
The relocatable o65 fileformat used by the lib6502 standard library
in version 2.0.0 allows more than one instance of a program being run
at the same time without interference, even without virtual memory.
Also the very same binaries runs on all supported platforms (if they do not
use architecture specific stuff, but lib6502 calls only).
</p>
    </desc>
  </section>

  <section toc="arch" name="Architecture">
    <desc>
<p>
Architectures supported are the C64, as well as my
<a href="../csa/index.html">CS/A65
MMU</a> selfbuilt computer and my
<a href="../csa/gecko/index.html">CS/A65 Gecko</a> board.
Also supported are the Commodore CBM8096 and CBM8296 computers, as well as
any 32k RAM PET (the 3032, 4032 and 8032)
</p>
<ul>
<li><a href="cbm8x96.html">CBM PET</a> documentation. Supported are 40 and
80 column models 3032, 4032, 8032, 8096 and 8296.</li>
<li><a href="embedded.html">Embedded systems</a> need not all features. Here is some doc to strip the OS down to the basics (with around 2.5k in the end...)</li>
</ul>
    </desc>
  </section>

  <section toc="dev" name="Development">
    <desc>
<p>
For the development of OS/A65 programs there are two possibilities:</p>
<ul>
<li><a href="../lib6502/index.html">lib6502</a> with the
<a href="../o65/index.html">o65</a>
file format. This allows source compatibility (to some degree) with Lunix, as
well as that the program runs on all supported platforms.
lib6502 programs are simply assembled with my xa65 crossassembler with the
including the file "lib6502.i65" and the assembler option "-LLIB6502" set.
This tells the compiler to put "LIB6502" into the
file as undefined reference that is resolved when loading. The lib6502
jump table is relative to this address.</li>

<li>A system application not only uses lib6502 calls (if it uses them)
but also <a href="kernel.html">kernel</a> calls. The kernel can be at
different addresses for different
architecture as well. Therefore you have to add "-LOSA2KERNEL" to the assembler
line. This address is also resolved when loading. If the file should also
be used as a ROM file, then it has to have a ROM boot header, see the
kernel description.</li>
</ul>
    </desc>
  </section>

  <section toc="docs" name="More Docs">
    <desc>
<ul>
<li>Here is the cross assembler
<a href="../misc/index.html">xa</a>
you need to assemble the whole stuff</li>
<li>How to <a href="build.html">build</a> the binaries</li>
<li><a href="https://github.com/fachat/GeckOS-V2/blob/master/doc/kernel.7.adoc">kernel</a> interface (linked from github)</li>
<li><a href="../lib6502/index.html">lib6502</a> description, and <a href="https://github.com/fachat/GeckOS-V2/tree/master/doc/lib6502">lib6502 call docs on github</a>.</li>
<li>Operation <a href="nommu.html">without an MMU</a></li>
<li>introduction to the <a href="devices.html">devices</a></li>
<li><a href="filesystems.html">filesystem</a> interface</li>
<li>The <a href="README.slip">README.slip</a> with instructions how to run the TCP/SLIP software</li>
<li>There also is a list of <a href="IDEAS">Ideas</a> what to do next...</li>
<li>An instruction to the lib6502 <a href="README.lsh">lsh</a></li>
</ul>
    </desc>
  </section>

  <section toc="old" name="Old Stuff">
    <desc> 
<p>This will probably go away or be replaced with more up-to-date documentation.</p>
<ul>
<li><a href="oa1.html"><strong>Overview</strong></a> over the Computer System and its Software</li>
<li><a href="kernel.html">kernel</a> interface</li>
<li>The old <a href="oldlib.html">standard library</a> has been
replace with the lib6502 and is not longer supported.</li>

<li>The old summary of <a href="shell.html">shell</a> has been replaced
by the lib6502 lsh and will no longer be developed.</li>
<li>The old <a href="mon.html">monitor</a> is still supported, but not actively developed any more.</li>
<li>summary of features and extensions of the
<a href="basic.html">BASIC</a> interpreter <strong>(c) Commodore</strong></li>
<li>The <a href="LOG-1.3">ChangeLog</a> for version 1.3.* and for
the development of <a href="LOG-pre-2.0">2.0.0</a>.</li>
<li>The <a href="README.c64">README.c64</a> with instructions how to run it on the C64</li>
<li>The  <a href="README">README</a> that comes with the binary.</li>
<li>There also is a list of <a href="BUGS">Known Bugs</a></li>
<li>A description of the <a href="files.txt">files</a> in the archive</li>
</ul>
    </desc>
  </section>

  <section toc="history" name="History">
    <desc>
<p>
I didn't dream of this becoming such a nice project when I started
building <a href="../csa/index.html">this computer</a> in 1989.
</p><p>
After someone asked me to release it to the public, I decided
to put it under the <a href="COPYING">GNU public license</a>.
(Which, of course, doesn't hold true for the ported BASIC interpreter, which
is taken from the C64.
See this <a href="basic.html">file</a> for more.) Also the
character ROMs are taken from the C64. However, Commodore in its old
form doesn't exist anymore and attempts to contact the new right holders
have not brought any success, so I put them here.
</p><p>
Well, when I did this project, it was just for fun. But now I find it
quite nice. Well, if you know some magazin that would like to publish
some of it, I will be glad writing an article or so (if anybody really
wants it ;-)<br/>
But on the other hand my interests have moved.
Occasionally I still work on the project - when I have the time (or take
the time ;-) <br/>
But after all, I don't really have time for it.
</p>
    </desc>
  </section>

  <section toc="ideas" name="Ideas for later versions">
    <desc> 
<ul>
<li>vt100 control codes for the console.</li>
<li>native C128 port</li>
<li>in this process abstract a kind of block device from fsibm and use
it for the VC1571 as well</li>
</ul>
    </desc>
  </section>

  <closing>
@FOOTER@
  </closing>
</webpage>
