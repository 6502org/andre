<!DOCTYPE webpage [ <!ENTITY eacute "&#233; "> <!ENTITY uuml "&#220; "> <!ENTITY nbsp "&#160; "> ]>
<webpage name="Advanced 6502">
  <author>
    <name>Andr&eacute; Fachat</name> 
    <email>@EMAIL@</email>
    <homepage>@WEBROOT@</homepage>
  </author>
  <keywords>8-bit,6502</keywords>
  <metadesc>8-bit 6502 hardware knowledge</metadesc>
  <overview>
	Here I have projects that extend the usual 6502 processor in various bits.
  </overview>
  <news>
    <item date="2020-10-29">
	Updated some links.
    </item>
    <item date="2017-10-21">
	Added the link to Andrew Holme's Verilog 6502 based on the NMOS netlist.
    </item>
    <item date="2013-11-16">
	Added some links about AVR-based emulation and the 65el02.
    </item>
    <item date="2013-10-13">
	Added small demo video on the <a href="pet816/index.html">PET816</a> accelerator card.
    </item>
    <item date="2010-08-28">
	Created this page.
    </item>
  </news>
  <toc/>
  <itemlist name="Quickfinder">
    <!--desc>
    </desc-->
    <items>
      <subitem name="The 65k project" link="../65k/index.html"> - 
	In the 65k project I defined an extended set of opcodes and features for a 6502
	that uses up to 64 bit registers, while still being - at least software-wise -
	upward-compatible with the original 6502. I plan to put it into VHDL and really use it,
	but that has not started (yet).
      </subitem>
      <subitem name="PET816" link="pet816/index.html"> - 
	The <a href="pet816/index.html">PET816</a> board replaces the 6502 in a normal 6502 computer
	with a 65816 board. The 65816 can be clocked up to 10&#160;MHz, using the additional RAM that
	is on the board - making for a really fast PET. With different memory selection logic in the
	used CPLD it could be used for other 6502 systems like the VIC20, or maybe even a 6502-based 
	Apple or Atari computer.
      </subitem>
      <subitem name="CS/A65" link="../csa/index.html"> -
	The CS/A65 computer in various ways go "beyond" the original 6502 concept. That this is possible
	is actually a sign for how flexible the simple 6502 basic design is.
	The <a href="../csa/cpu/index.html">CS/A65 CPU board</a> in itself can be seen as an extended 6502. It extends the core with an MMU
	to get more address lines, but also with write-protected memory, no-execute bits, or page faults
	for non-mapped memory blocks. The <a href="../csa/auxcpu/index.html">Auxiliary CPU</a> then 
	provides a CPU that can actually correct the memory faults while the main CPU is halted - 
	coming from the fact that the original 6502 lacks an ABORT signal that the 65816 has.
	The <a href="../csa/copro/index.html">coprocessor board</a> then is the first step into
	non-uniform-memory-access (NUMA) multiprocessing.
	Finally the <a href="../csa/cpuemu/index.html">CPU emulator</a> board allows to replace the
	6502 in a normal system with a connection to the CS/A computer - where the 64k of the emulated
	system just becomes a 64k windows in the CS/A65 1&#160;MByte address space.
      </subitem>
    </items>
  </itemlist>

  <section toc="other" name="Other 6502 extension projects">
	<desc><p>This section contains links to various projects of other people that extended the 6502</p>
	</desc>

	<subsection toc="65gz032" name="65GZ032">
		<desc><p>With the 65GZ032 Gideo Zweijtzer has built a VHDL core that is 6502 compatible, but extends the
		8&nbsp;bit core with a 32&nbsp;bit design. From the programmers reference manual:
		</p>
		<ul>
		<li>Full 32 bit design</li>
		<li>Pipelined RISC architecture, with instruction and data caches</li>
		<li>Eight 32 bit registers (five are all-purpose) and one 16 bit register</li>
		<li>Several new opcodes</li>
		<li>New addressing modes</li>
		<li>Highly orthogonal architecture (very few fixed function registers)</li>
		<li>Can access 4GB of linear memory (no segments, bank switching, etc)</li>
		<li>Built-in paged memory management unit</li>
		<li>Much higher clock speeds (33 MHz)</li>
		</ul>
		<p>The processor is able to operate on 8, 16, and 32 bit wide operands, address and data busses are
		32&nbsp;bit each. The 65GZ032 opcodes are interleaved with the 6502 opcodes in that the first byte
		has to lowest two bits set - which are all illegal opcodes in the 6502 - and a second opcode bytes
		then gives an opcode space of 14&nbsp;bit, i.e. 16384 possible native instructions.
		6502 opcodes are translated into one or two of the CPU's 32&nbsp;bit native opcodes
		when the instruction is fetched.
		</p><p>
		The CPU has been used in the C=1 system, but it is difficult to find further references anymore. According
		to the commodorefree interview with Gideo it may have been abandoned.
		</p></desc>
		<extlink name="65GZ032 programmers reference (PDF)" link="http://homepage.mac.com/jorgechamorro/a2things/PDFs/65GZ032prg_v0.11.pdf"/>
		<extlink name="Hardware development (of the 65GZ032)" link="http://commodore-gg.hobby.nl/verhaal51.htm"/>
		<extlink name="Commodorefree interview with Gideon" link="http://www.commodorefree.com/magazine/vol3/issue35.html#GIDEON"/>
	</subsection>

	<subsection toc="kimklone" name="KimKlone">
		<desc><p>The KimKlone is a very intersting 6502 extension. The system catches 65C02 undefined opcodes, and
		executes them aside the original processor. This way also the address space is extended to 24&nbsp;bit.
		</p></desc>
		<extlink name="KimKlone homepage" link="http://laughtonelectronics.com/arcana/BrideOfSonPg1.html"/>
	</subsection>

	<subsection toc="mycpu" name="MyCPU">
		<desc><p>
		The MyCPU is a computer completely built from logic ICs - no highly integrated parts used! I.e. the processor consists
		of basically 74-series logic ICs plus a number of ROMs. The internals are 8&nbsp;bit, as using wider busses and registers
		would have used many more parts.
		</p><p>
		The MyCPU computer is only barely fitting into this 6502 page - it is not binary compatible.</p>
		<p class="quote">The processor has only 5 universal and 1 special purpose register: A, X, Y, P and SP are universal 8-bit registers, whereas the Program Counter (PC) is a special purpose 16-bit register whose contents can be incremented by one through a dedicated signal. The P-register is only an internal register used by the microcode to store temporary data and is not visible to assembly programs. In my implementation the microcode covers many commands and addressing modes of the good old 6502 processor, but MyCPU is not binary compatible to it.</p>
		<p>As you can see from that description, the processor has nevertheless been inspired by the 6502.
		</p><p>
		In the meantime the author, Dennis Kuschel, has built a VHDL version of the MyCPU, built into a Xilinx Spartan3 FPGA,
		called "MyCPU Compact". The development is still ongoing!
		</p></desc>
		<extlink name="MyCPU homepage" link="http://www.mycpu.eu/"/>
	</subsection>

	<subsection toc="m02" name="M02">
		<desc><p>Dieter M&uuml;ller has built a 6502-compatible CPU from logic parts as well</p></desc>
		<extlink name="M02" link="http://www.6502.org/users/dieter/m02/m02.htm"/>
	</subsection>

	<subsection toc="m02" name="65CE02">
		<desc><p>The 65CE02 was a modernization of the 6502, developed by Commodore itself back in the days</p></desc>
		<extlink name="65CE02" link="http://www.commodore.ca/manuals/funet/cbm/documents/chipdata/65ce02.txt"/>
	</subsection>

	<subsection toc="ttl6502" name="Ruud's Build your own 6502">
		<desc><p>Ruud Baltissen started work on a TTL6502</p></desc>
		<extlink name="TTL6502" link="http://www.baltissen.org/newhtm/ttl6502.htm"/>
	</subsection>

	<subsection toc="crate" name="AppleCrate">
		<desc><p>The AppleCrate I and II are multi-processing machines built from Apple II boards.
			</p></desc>
		<extlink name="AppleCrate I" link="http://www.michaeljmahon.com/CratePaper.html"> with 8 processors</extlink>
		<extlink name="AppleCrate II" link="http://www.michaeljmahon.com/AppleCrateII.html"> with 17 processors</extlink>
		<extlink name="Micheal J. Mahon's further projects" link="http://www.michaeljmahon.com/"> for example NadaNet</extlink>
	</subsection>	

	<subsection toc="el02" name="65el02">
		<desc><p>Eloraam has implemented a 6502 emulation in minecraft!</p>
		<p>This 65el02 implements 6502 and 65C02 opcodes, part of the 65816 and own instructions.
			It adds a "D" registers that allows using multiply and divide opcodes
		</p>
		</desc>
		<extlink name="65el02 opcodes" link="http://www.eloraam.com/nonwp/redcpu.php"></extlink>
		<extlink name="65el02 announcement" link="http://www.eloraam.com/blog/2011/10/14/welcome-to-the-future/"></extlink>
	</subsection>	
  </section>

  <section toc="emul" name="65xx Emulation">
	<desc><p>This section gives links and information about hardware- and software-based 6502 emulation projects.
		Most of these (so far) concern original 6502 compatible cores</p></desc>
	
	<subsection toc="avr" name="AVR-based emulation">
		<desc><p>It has been shown that the 6502 can actually be emulated within an AVR microcontroller.
			1MHz emulated speed has been achieved with 16MHz AVRs (in a simple emulated hardware setup).
		</p></desc>
		<extlink name="Mikrocontroller.net on 6502 emulation in AVRs (German)" link="http://www.mikrocontroller.net/articles/AVR_6502_Emulator"/>
		<extlink name="Thread on Mikrocontroller.net (in German)" link="http://www.mikrocontroller.net/topic/193632">last post seems to contain code</extlink>
		<extlink name="NES 6502 emulation in an ATMega" link="http://instruct1.cit.cornell.edu/courses/ee476/FinalProjects/s2009/bhp7_teg25/bhp7_teg25/index.html"/>
		<extlink name="6502 emulation on AVR" link="http://forum.6502.org/viewtopic.php?f=8&amp;t=2312">(on forum.6502.org)</extlink>
		<extlink name="AVR-based Apple II emulator" link="http://forum.6502.org/viewtopic.php?f=8&amp;t=2766">(on forum.6502.org)</extlink>
	</subsection>

	<subsection toc="nmos" name="NMOS-based emulation">
		<desc><p>Andrew Holme has managed to create a Verilog-based core using the 
			actual NMOS transistor netlist from visual6502.org!</p></desc>
		<extlink name="Verilog 6502" link="http://www.aholme.co.uk/6502/Main.htm"></extlink>
	</subsection>

	<exlink name="6502.org emulation links" link="http://www.6502.org/tools/emu/"/>
  </section>

  <section toc="info" name="65xx Information">
    <desc><p>Here are some links to general 6502 and beyond information</p></desc>
    <extlink name="Digging into Technology's Past - History of the 6502" link="http://archive.archaeology.org/1107/features/mos_technology_6502_computer_chip_cpu.html"/>
    <extlink name="The 6502/65C02/65C816 instruction set decoded" link="http://www.llx.com/~nparker/a2/opcodes.html"/>
    <extlink name="Programming the 65816 (PDF)" link="http://www.westerndesigncenter.com/wdc/documentation/programmanual.pdf"/>
    <extlink name="How the illegal instructions really work" link="http://www.pagetable.com/?p=39."/>
    <extlink name="A reengineered and visually simulated original 6502!" link="http://visual6502.org/"/>
    <extlink name="27C3 presentation on the visual6502 reverse engineering process" link="http://dangerousprototypes.com/2011/01/01/27c3-reverse-engineering-the-mos-6502/"/>
    <extlink name="Reverse Engineering the 6502" link="http://dangerousprototypes.com/2011/01/01/27c3-reverse-engineering-the-mos-6502/"> A presentation of visual6502 from the 27C3 conference in december 2010</extlink>
    <extlink name="The ROR bug in early 6502 revisions!" link="http://www.pagetable.com/?p=45"/>
    <extlink name="6502.org forum: A taken branch delays interrupt handling by one instruction..." link="http://forum.6502.org/viewtopic.php?t=1634"/>
    <extlink name="6502.org forum: Improving the 6502, some ideas..." link="http://forum.6502.org/viewtopic.php?t=1419"/>
    <extlink name="6502.org forum: Prefix bytes: an idea for 65Org816..." link="http://forum.6502.org/viewtopic.php?t=1550"/>
    <extlink name="Admired designs..." link="http://www.cs.clemson.edu/~mark/admired_designs.html#wilson"/>
    <extlink name="The 6502 decimal flag" link="http://6502.org/tutorials/decimal_mode.html"/>
    <extlink name="Experience from writing a 6502 core" link="http://tech.groups.yahoo.com/group/fpga-cpu/message/1784"/>
    <extlink name="The Steckschwein - a 6502 in a plugboard (in German)" link="https://steckschwein.de/"/>
  </section>
 
  <section toc="other" name="Other CPU links">
    <desc><p>Some links about other, non-6502 compatible (homebrew) CPUs</p></desc>
    <extlink name="Big Mess-oWires" link="https://www.bigmessowires.com/bmow1/"/>
    <extlink name="The original ARM architecture was inspired by the 6502 (wikipedia)" link="http://en.wikipedia.org/wiki/ARM_architecture"/>
  </section>

    <disclaimer name="Disclaimer">
@DISCLAIMER@
    </disclaimer>
  <closing>
  </closing>
</webpage>
