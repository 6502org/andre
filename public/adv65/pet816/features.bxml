<!DOCTYPE webpage [ <!ENTITY eacute "&#233; "> <!ENTITY nbsp "&#160;"> ]>
<webpage name="65816 board features">
  <author>
    <name>Andr&eacute; Fachat</name> 
    <email>@EMAIL@</email>
    <homepage>@WEBROOT@</homepage>
    <yearstart>2010</yearstart>
    <yearend>2010</yearend>
  </author>
  <keywords>Commodore PET 6502 65816 cpu replacement board</keywords>
  <metadesc>Commodore PET 65816 CPU replacement board explained</metadesc>
  <overview>
	<p>This page describes the features of the 65816 board,
	as well as the register settings in detail.
	</p><p>
	Please note that "system bus" refers to the 6502 bus connector.
	</p>
  </overview>
  <forum type="6502.org">http://forum.6502.org/viewtopic.php?t=1573</forum>
  <!--news>
    <item date="2010-01-04">
	Started this page
    </item>
  </news-->
  <toc/>

  <section toc="hw" name="Hardware Features">
     <desc>This section describes the hardware features of the board that are available
	in the form of jumpers, and only selected ones. 
	For a more detailled hardware description see the 
	<a href="hardware.html">hardware page</a>.
     </desc>
     <subsection toc="jumpers" name="Jumpers and Connectors">
	<desc><p>
	The board has a number of jumpers and connectors. The most important one is shown here:</p>
	<ul>
	<li>JP1: BOOTROM - when set to on, the on-board ROM is mapped into the lowest 64k
		address space upon reset, so the board can take the system over on power-up</li>
	</ul>
	</desc>
     </subsection>
  </section>

  <section toc="sw" name="Software">
     <desc>This section describes the software-side features of the board. These features
	are implemented as part of the CPLD logic.
     </desc>
     <subsection toc="control" name="Control Register">
	<desc><p>The CPLD implements a control register at the address $ExyF, where "xy" is determined
	by the jumper settings JP7/8/9. Unfortunately this register currently is write-only.
	Here is a description of the control register bits:</p>
	<table border="1" class="content" width="80%">
		<tr><th>Bit</th><th>Value</th><th>Name</th><th>Description</th><th>Init value</th><th>Notes</th></tr>
		<tr><td>7</td><td>128</td><td>PRGROM</td><td>When set, allows write access to the built-in ROM. Note that specific algorithms are required to do the programming, random access does not work</td><td>0</td></tr>
		<tr><td>6</td><td>64</td><td>BOOTROM</td><td>When set, the lowest 64k CPU address space are mapped to the built-in ROM (except video and I/O, see above)</td><td>Bootrom jumper</td><td>Note this allows to unmap the system ROM after boot by setting this bit to 0. Only the initial value is taken from the Bootrom jumper.</td></tr>
		<tr><td>5</td><td>32</td><td>SLOW64K</td><td>When set, the lowest 64k CPU address space are mapped to the system bus (6502 connector)</td><td>1</td></tr>
		<tr><td>4</td><td>16</td><td>SLOWCLK</td><td>When set, use the system clock even on fast memory</td><td>1</td></tr>
		<tr><td>3</td><td>8</td><td>HIDEBOGUS</td><td>When set, hide the CPU's bogus cycles - as indicated by VPA and VDA both 0 - from the system bus when possible.</td></tr>
		<tr><td>2</td><td>4</td><td>FASTVREAD</td><td>When set, read the video RAM area from the fast RAM (writes still go to the slow system RAM)</td></tr>
		<tr><td>1,0</td><td>2,1</td><td>WPROTECT</td><td>Write protect upper parts of the lowest 64k of FastRAM
			<table><tr><th>Value</th><th>Protected Area</th></tr>
				<tr><td>00</td><td>None</td></tr>
				<tr><td>01</td><td>$A000-$FFFF</td></tr>
				<tr><td>10</td><td>$C000-$FFFF</td></tr>
				<tr><td>11</td><td>$E000-$FFFF</td></tr>
			</table>
		</td><td>00</td></tr>
	</table>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>
     <subsection toc="memmap" name="Memory Map">
	<desc><p>This section describes the memory map of the system. As there are some jumper settings
		that influence the memory map, it is best shown in a table.</p>
		<table class="content" border="1"><tr><th>Memory area</th><th>Range</th><th>no BOOTROM, no SLOW64k</th><th>BOOTROM, no SLOW64k</th><th>no BOOTROM, SLOW64k</th><th>Notes</th></tr>
			<tr><th>$000000-$007fff</th><td>32k</td><td>FastRAM</td><td>BootROM</td><td>system bus</td><td>Writes always also go to FastRAM (write through)</td></tr>
			<tr><th>$008000-$0087ff</th><td>2k</td><td colspan="3">system bus (video memory) $8000-$87ff</td><td>Note: If the FASTVREAD control register bit is set, only writes go to the system bus (and write through to FastRAM), but reads only go to FastRAM.</td></tr>
			<tr><th>$008800-$00e7ff</th><td>24k</td><td>FastRAM</td><td>BootROM</td><td>system bus</td><td>Writes always also go to FastRAM (write through)</td></tr>
			<tr><th>$00e800-$00efff</th><td>2k</td><td colspan="3">system bus (io) $e800-$efff</td><td>Writes always also go to FastRAM (write through)</td></tr>
			<tr><th>$00f000-$00ffff</th><td>4k</td><td>FastRAM</td><td>BootROM</td><td>system bus</td><td>Writes always also go to FastRAM (write through)</td></tr>
			<tr><th>$010000-$0fffff</th><td>960k (2*512k-64k)</td><td colspan="3">FastRAM</td></tr>
			<tr><th>$100000-$dfffff</th><td></td><td colspan="3">---</td></tr>
			<tr><th>$e00000-$efffff</th><td>1024k</td><td colspan="3">system bus (mirror)</td></tr>
			<tr><th>$f00000-$f7ffff</th><td>512k</td><td colspan="3">FastRAM mirror from $000000-$07ffff</td></tr>
			<tr><th>$f80000-$ffffff</th><td>512k</td><td colspan="3">ROM</td></tr>
		</table>
	<p>Some things should probably be explained:</p>
	<p>There is a FastRAM mirror in $f00000. This is used to copy the slow system bus memory 
	to FastRAM. Normally the FastRAM is written through when the system bus is written to. 
	But when copying the ROM from the 8296 to the FastRAM by copying the ROM in-place, the
	system hang: the 8296 has a write-only register at $fff0, writing the value read from the
	ROM there hangs the system. So to be sure you have to write to an unmirrored FastRAM - the
	mirror at $f00000.</p>
	<p>The system bus mirror is there to access the slow system bus even when the lowest 64k
	are running in FastRAM. I made the mirror 16 times the 64k system bus, for a total of 1MByte,
	to stay "compatible" with my CS/A65 65816 CPU card. This may also be good for future expansions.
	</p>
	</desc>
     </subsection>
     <subsection toc="speedmap" name="Speed Map">
	<desc><p>Although there is a dedicated "fast" and a dedicated "slow" bus (65816 vs. system bus), 
	the CPU speed does not completely align with these borders. There are two types of access,
	"slow" and "fast". Slow is always synchronized with the system bus PHI2 clock. Fast accesses
	are independent from the system bus clock and the actual speed is determined by the clock
	register.
	</p><p>
	If the system bus accessed, of course the CPU is slowed down and synchronized with the slow
	system bus PHI2 clock, to perform the access. But also the ROM is accessed with the slow
	access method - so ordinary PROMs can be used. 
	</p><p>
	The CPLD's control and clock registers are accessed from the CPU's fast bus, but the access
	is actually done slow, as the I/O address comparator is connected to the slow bus.
	</p><p>
	All that changes when SLOWCLK is set in the control register. Then all accesses, even to
	FastRAM, no matter what address are slow. This way you can easily use code that requires to
	runs at exactly the same clock than the original system.
	</p>
	</desc>
     </subsection>
     <subsection toc="clock" name="Clock register">
	<desc><p>The CPLD not only implements a control register, but also a clock register
	at the address $ExyE, where "xy" is determined
        by the jumper settings JP7/8/9. Unfortunately also this register currently is write-only.
	</p><p>
	This clock register determines the speed of the actual fast accesses.
	Speed is determined by the lowest 5 bit, that work as a counter latch.
	In general the speed can be determined by calculating:
	<pre>
	FClk = 50MHz / (clklatch + 1)
	</pre>
	where clklatch is the value of the lowest 5 bits in the control register. Here is a small
	comparison between register values and clock speeds (for the 50MHz oscillator used)
	for some latch values:</p>
	<table border="1">
	<tr><th>latch value</th><th>clock speed (MHz)</th><th>&nbsp;</th></tr>
	<tr><td>15</td><td>3.1</td><td>Default</td></tr>
	<tr><td>9</td><td>5</td></tr>
	<tr><td>5</td><td>8.3</td></tr>
	<tr><td>4</td><td>10</td></tr>
	</table>
	<p>Please note that you should not make the fast clock slower than the system clock,
	otherwise the system will hang!</p>
	<p>Additionally the clock register contains the "fastmode" bit in bit 7.
	This bit is set by default. Its working is a bit difficult to explain.
	The board detects whether the next access is slow at a fixed point after 
	system bus PHI2 going low. If fastmode is set, this detection is done very quickly,
	so that at most one fast half cycle fits before the detection. This means
	that the system clock can be up to 2MHz without loss of speed. But it also means
	that bogus cycles cannot be hidden.
	If fastmode is not set, the detection is done
	later, so that one and a half cycle fit in from PHI2 going low to this detection.
	This allows to hide bogus cycles within PHI1 of the system bus - but 
	system clock can only be 1MHz, or the system will slow down (you can read
	more about it in the <a href="works.html">How it works</a> page).
	Just remember that fastmode should be set on a 2MHz host system bus, and not
	on a 1MHz bus.</p>
	</desc>
     </subsection>
  </section>

  <closing>
@FOOTER@
  </closing>
</webpage>
