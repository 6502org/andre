<!DOCTYPE webpage [ <!ENTITY eacute "&#233; "> <!ENTITY nbsp "&#160;"> ]>
<webpage name="The 65k Project - Implementation Specs">
  <author>
    <name>Andr&eacute; Fachat</name> 
    <email>@EMAIL@</email>
    <homepage>@WEBROOT@</homepage>
    <yearstart>2010</yearstart>
    <yearend></yearend>
  </author>
  <keywords>6502 16bit 32bit expansion</keywords>
  <metadesc>6502 16bit 32bit expansion</metadesc>
  <style>optable.css</style>
  <forum type="6502.org">http://forum.6502.org/viewtopic.php?p=12180</forum>
  <overview><p>
	This page describes the implementation specs for my 65k line of processors.
	For a reasoning why a feature is implemented as it is, see the <a href="features.html">Features discussion</a>
	page.
	</p><p>
	The 65k will be available in different "sizes" - mainly in terms of register widths.
	For example options for 16&nbsp;bit, 32&nbsp;bit, and even 64&nbsp;bit registers are defined.
	The first section will thus describe the options available.
	</p><p>
	The second section will then give an overview on the opcodes and their addressing modes
	The third section describes reset, interrupt and other special behaviour.
	</p><p>
	Note that these tables are currently preliminary. Final goal is to generate this part of the
	documentation from the same source that generates the VHDL control tables.
  </p></overview>
  <news>
    <item date="2010-10-23">
	Published this page
    </item>
    <item date="2010-10-03">
	Started this page
    </item>
  </news>
  <toc/>

  <section toc="preface" name="Preface">
  <subsection toc="lic" name="License">
    <desc><p>
        This content is licensed under the Creative Commons Attribution Share-Alike license, CC-BY-SA version 3.0.
    </p><p>
        Note this "content" includes this web page, but does not include the 6502.org header
        and the left and right web page columns.  Click on the "Maximize" link to see
        the contents covered by this license.
    </p></desc>
    <extlink name="CC-BY-SA legal code" link="http://creativecommons.org/licenses/by-sa/3.0/legalcode"/>
    <extlink name="CC-BY-SA license deed (short form)" link="http://creativecommons.org/licenses/by-sa/3.0/"/>
  </subsection>
  <subsection toc="disc" name="Disclaimer">
    <desc><p>
        The content comes with no warranty at all!
        There is no guarantee and no promise that this specification is correct, consistent, will actually work,
        or will ever be implemented at all.
    </p><p>
	To my understanding the techniques described here have been used by various processors for decades already.
	Still there is no guarantee that a processor according to this spec would not be covered by some patents.
    </p><p>
        Subject to change without notice!
    </p></desc>
  </subsection>
  <subsection toc="cont" name="Contributors">
    <desc><ul>
        <li>Andr&eacute; Fachat - initial author: <a href="http://www.6502.org/users/andre">8bit Homepage</a></li>
    </ul></desc>
  </subsection>
  <subsection toc="chg" name="Changes">
    <desc><p>This section describes the changes to the document:</p>
      <table border="1">
        <tr><th>Date</th><th>Author</th><th>Changes</th></tr>
        <tr><td>2010-10-23</td><td>Andr&eacute; Fachat</td><td>First working draft</td></tr>
        <tr><td>2010-11-04</td><td>Andr&eacute; Fachat</td><td>Defined the interrupt status/mask/effective 
		mask register; Constrained the interrupt/trap/abort vectors to two-byte vectors;
		integrated the various extra registers into the configuration register file (for less
		opcodes necessary); add WAI, STP and FIL/FILU</td></tr>
      </table>
    </desc>
  </subsection>
  </section>


  <section toc="opts" name="65k Options">
     <desc><p>This section describes the different versions of the 65k processor
	</p>
     </desc>
       <subsection toc="optswidth" name="Register Widths Options">
	<desc><p>
	The 65k will be available in different "register widths". Register here means all address registers
	(stack pointer (SP), program counter (PC), base offset register (BR)), but also all data registers (AC, XR, YR).
	This does not include the status register for example. For details see the register model below.
	Address and Data registers will always have the same width to accomodate for address offsets computed
	in data registers.
	</p><p>
	The following options are available:</p>
	<ul>
	<li>16&nbsp;bit - a small extension to the original 6502 programming model, the PC stays 16&nbsp;bit as 
		it already is in the 6502.</li>
	<li>32&nbsp;bit - all data and address registers extended to 32&nbsp;bit</li>
	<li>64&nbsp;bit - all data and address registers extended to 64&nbsp;bit</li>
	</ul><p>
	The original register width for most of the registers is a byte. To use the registers with more than
	8&nbsp;bit a prefix opcode to the existing 8&nbsp;bit opcodes is used. 2 bit of the prefix opcode are
	reserved for operation width, which allows to address registers as 8, 16, 32 or 64&nbsp;bit.
	</p><p>
	The different register or operand widths are noted by a prefix. These prefixes are defined and used
	here:</p>
	<table border="1">
	<tr><th>Prefix</th><th>Width</th><th>Comment</th></tr>
	<tr><td>&nbsp;</td><td>8</td><td>no prefix gives the 6502 8&nbsp;bit behaviour</td></tr>
	<tr><td>W</td><td>16</td><td>Word</td></tr>
	<tr><td>L</td><td>32</td><td>Long</td></tr>
	<tr><td>Q</td><td>64</td><td>Quadword (alternatively LL, but Q should be used)</td></tr>
	</table>
    	</desc>
       </subsection>

       <subsection toc="optssuper" name="Hypervisor Mode Option">
	<desc><p>
	The 65k will optionally provide a hypervisor mode. When using a hypervisor mode, critical instructions -
	those that modify system state - become privileged and are thus only allowed in hypervisor mode.
	Hypervisor mode allows to separate user space programs from kernel space, and protects the kernel from
	unwanted modifications from user space.
    	</p></desc>
       </subsection>

       <subsection toc="optsmmu" name="MMU Option">
	<desc><p>
	The 65k will optionally provide an MMU to translate virtual addresses (opcode effective addresses) into
	physical addresses. When the MMU is not included, virtual addresses are directly taken as physical addresses.
    	</p></desc>
       </subsection>

  </section>

  <section toc="regs" name="Register Set">
    <desc><p>
	The register set is very similar to the 6502, with only a few extensions...
	As there are different options for register widths, "W" describes the width
	option, i.e. either 16, 32 or 64 bit. 
	</p><p>In addition to the core registers there are registers for the memory management.
    </p>
    </desc>
   <subsection toc="regcore" name="Core register">
    <desc>
    <table border="1">
	<tr><th>Register</th><th>Name</th><th>6502</th><th>65k</th><th>Comment</th></tr>
	<tr><td>A</td><td>Accumulator</td><td>8 bit</td><td>W bit</td><td>Operations can be done in 8, 16, 32, 64 bit (up to W)</td></tr>
	<tr><td>X</td><td>X register</td><td>8 bit</td><td>W bit</td><td>Operations can be done in 8, 16, 32, 64 bit (up to W)</td></tr>
	<tr><td>Y</td><td>Y register</td><td>8 bit</td><td>W bit</td><td>Operations can be done in 8, 16, 32, 64 bit (up to W)</td></tr>
	<tr><td>E</td><td>Effective Address Register</td><td>-</td><td>W bit</td><td>Stores effective address for opcodes</td></tr>
	<tr><td>B</td><td>Base Offset Register</td><td>-</td><td>W bit</td><td>Address offset for addressing modes</td></tr>
	<tr><td>S(U)</td><td>User mode Stack pointer</td><td>-</td><td>W bit</td><td></td></tr>
	<tr><td>S(H)</td><td>Hypervisor mode Stack pointer</td><td>8 bit, with high byte set to 1</td><td>W bit</td><td></td></tr>
	<tr><td>SR</td><td>Status Register</td><td>8 bit, with bit 5 set to 1</td><td>8/8 bit</td><td>low 8 bit are the same as 6502, bit5 set to 0, high 8 bit see below</td></tr>
	<tr><th colspan="5">Interrupt Management Registers</th></tr>
	<tr><td>IMR</td><td>Interrupt Level Mask Register</td><td>-</td><td>8 bit</td><td>Interrupt Mask - define which interrupt levels are accepted</td></tr>
	<tr><td>EIM</td><td>Effective Interrupt Level Mask Register</td><td>-</td><td>8 bit</td><td>Temporary Interrupt Mask. set from the ISR when an interrupt routine is initiated. Reset to IMR on RTI.</td></tr>
	<tr><td>ISR</td><td>Interrupt Level Status Register</td><td>-</td><td>8 bit</td><td>Interrupt line status - number of highest active interrupt line</td></tr>
	<tr><td>PC</td><td>Program Counter</td><td>16 bit</td><td>W bit</td><td></td></tr>
	<tr><th colspan="5">System Management Registers</th></tr>
	<tr><td>IV</td><td>Interrupt base register</td><td>-</td><td>W bit</td><td>Base address for interrupt vectors</td></tr>
	<tr><td>TV</td><td>Trap vector base register</td><td>-</td><td>W bit</td><td>Base address for trap vectors</td></tr>
	<tr><td>AV</td><td>Abort vector base register</td><td>-</td><td>W bit</td><td>Base address for abort vectors</td></tr>
	<tr><td>TMV</td><td>Trap maximum allowed vector number</td><td>-</td><td>W bit</td><td>set the maximum allowed trap vector number</td></tr>
	<tr><td>M(U)</td><td>User Mode Match register</td><td>-</td><td>8/8 bit</td><td>Match register for user mode</td></tr>
	<tr><td>M(H)</td><td>Hypervisor Mode Match register</td><td>-</td><td>8 bit</td><td>Match register for hypervisor mode</td></tr>
    </table>
    <p>The status register is divided into two bytes. The first mirrors the original 6502 status byte:</p>
    <table border="1">
<tr><th>bit 7</th><th>bit 6</th><th>bit 5</th><th>bit 4</th><th>bit 3</th><th>bit 2</th><th>bit 1</th><th>bit 0</th></tr>
<tr><th>128</th><th>64</th><th>32</th><th>16</th><th>8</th><th>4</th><th>2</th><th>1</th></tr>
<tr><td>N</td><td>V</td><td>0</td><td>B</td><td>D</td><td>I</td><td>Z</td><td>C</td></tr>
    </table>
    <table border="1">
<tr><th>Bit</th><th>Name</th><th>Explanation</th></tr>
<tr><td>N</td><td>Negative</td><td>Set when operation results in a negative value (bit 7 set)</td></tr>
<tr><td>V</td><td>Overflow</td><td>Set when arithmetic operation or compare results in an overflow value</td></tr>
<tr><td>B</td><td>Break</td><td>Set when a BRK opcode has been executed, is only written to the stack</td></tr>
<tr><td>D</td><td>Decimal</td><td>Decimal flag</td></tr>
<tr><td>I</td><td>Interrupt</td><td>Set to disable interrupts (deprecated)</td></tr>
<tr><td>Z</td><td>Zero</td><td>Set when operation results in a zero value</td></tr>
<tr><td>C</td><td>Carry</td><td>Carry for arithmetic operations and compares</td></tr>
    </table>
    <p>The second byte is an extended status byte. It is written on the stack frame on TRAP (user and
	hypervisor mode) and interrupts in hypervisor mode:</p>
    <table border="1">
<tr><th>bit 7</th><th>bit 6</th><th>bit 5</th><th>bit 4</th><th>bit 3</th><th>bit 2</th><th>bit 1</th><th>bit 0</th></tr>
<tr><th>128</th><th>64</th><th>32</th><th>16</th><th>8</th><th>4</th><th>2</th><th>1</th></tr>
<tr><td>0</td><td>0</td><td>0</td><td>0</td><td>H</td><td>P</td><td>SF1</td><td>SF0</td></tr>
    </table>
    <table border="1">
<tr><th>Bit</th><th>Name</th><th>Explanation</th><th>State on Reset</th></tr>
<tr><td>H</td><td>Hypervisor mode</td><td>Set when the processor is in hypervisor mode</td><td>1</td></tr>
<tr><td>P</td><td>Previous hypervisor mode</td><td>Copy of the Hypervisor mode bit made on TRAP or interrupt</td><td>1</td></tr>
<tr><td>SF1/SF0</td><td>Stack Frame Size</td><td>Determines the stack frame size for a TRAP or an interrupt
	(01=2 byte, 10=4 byte, 11=8 byte return address. 00 is reserved)
	</td><td>01</td></tr>
	<p>
	Note that the value read from the stack on RTI and RTU opcodes is fully evaluated only when read from the
	supervisor stack. When read from the previous 
	hypervisor mode bit P is ignored. 
	If the hypervisor mode bit H is set, a privilege violation abort (PRIVRTI) is executed.
	If H is not set, the stack frame size bits SF are evaluated and the return address is read from the stack
	with a size according to SF.
	</p>
    </table>

    <p>The interrupt registers allow to query the current interrupt state and
	to control interrupt execution. They are not stored on the stack frame.
	</p>
    <table border="1">
<tr><th>Register</th><th>bit 7</th><th>bit 6</th><th>bit 5</th><th>bit 4</th><th>bit 3</th><th>bit 2</th><th>bit 1</th><th>bit 0</th></tr>
<tr><th>Value</th><th>128</th><th>64</th><th>32</th><th>16</th><th>8</th><th>4</th><th>2</th><th>1</th></tr>
<tr><th>IMR</th><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>IMR2</td><td>IMR1</td><td>IMR0</td></tr>
<tr><th>EIM</th><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>EIM2</td><td>EIM1</td><td>EIM0</td></tr>
<tr><th>ISR</th><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>ISR2</td><td>ISR1</td><td>ISR0</td></tr>
    </table>
    <table border="1">
<tr><th>Bit</th><th>Name</th><th>Explanation</th><th>Default</th></tr>
<tr><td>IMR2/IMR1/IMR0</td><td>Interrupt Priority Mask</td><td>Defines a number from 0 to 3. Each interrupt that 
	has a vector number above the value set here is disabled. Lower or equal interrupt numbers are enabled.
	I.e. value 0 disables all interrupts but NMI. Value 3 enables all interrupts.
	</td><td>00 (all interrupts disabled)</td></tr>
<tr><td>ISR2/ISR1/ISR0</td><td>Interrupt Status Register</td><td>Defines a number from 0 to 3 that determines the
	current interrupt level, i.e. the highest priority of all current - maskable - active interrupts,
	even if the interrupt itself is masked. 00 means no interrupt. For example 01 means interrupt 1 is active,
	but none other, while 10 means interrupt 2 is active, no matter if interrupt 1 is active or not.
	</td></tr>
<tr><td>EIM2/EIM1/EIM0</td><td>Temporary Interrupt Priority Mask</td><td>This value is set from the 
	interrupt mask register on RTI and CLEIM (both only on hypervisor mode), and set to the 
	interrupt level when the interrupt occurs. An interrupt routine is initiated when 
	EIM has a lower value than ISR - e.g. after an RTI or CLEIM when a lower priority interrupt is pending.</td></tr>
    </table>
    <p>The three interrupt registers work as follows.

	The supervisor-writable IMR defines which interrupts initiate 
	an interrupt routine. For example if the value is set to 2, interrupts with priority 0 (NMI), 1 and 2 are enabled.
	Interrupt with priority 3 and more are disabled.

	The ISR presents the "highest" interrupt level (lowest value(!)) that is currently active. 
	For example if interrupt lines 2, 5, and 7 are active, the ISR presents "2" as current status.

	When the ISR has a value that is lower or equal than the IMR value, an interrupt routine is initiated. 
	To stop the processor from continously starting the interrupt routine, when an interrupt routine is
	initiated, the EIM is used. It is the effective interrupt mask and normally set to the IMR value.
	When an interrupt routine is initiated, the EIM is set to the ISR value plus one. Then, as ISR is less than
	EIM, no further (stacked) interrupt routine is initiated. Only when a new interrupt with a higher
	priority (lower value) appears, the ISR value gets lower or less than EIM and a stacked interrupt routine
	is initiated.

	EIM is reset to the interrupt mask register 
	on RTI or CLEIM when executed in supervisor mode.
    </p>

    <p>The vector base registers allow define the addresses where interrupt, trap and abort vectors are 
	fetched from.
	</p>
    <table border="1">
<tr><th>Register</th><th>Description</th></tr>
<tr><th>IV</th><td>Address of interrupt vectors table; lowest 8 bit are reserved and must be 0</td></tr>
<tr><th>TV</th><td>Address of trap vectors table; lowest 8 bit are reserved and must be 0</td></tr>
<tr><th>AV</th><td>Address of abort vectors table; lowest 8 bit are reserved and must be 0</td></tr>
    </table>

    <p>The User mode match register is divided into two parts: the low byte is the actual match code. The high byte is
	a set of control bits for the user mode:</p>
    <table border="1">
<tr><th>bit 7</th><th>bit 6</th><th>bit 5</th><th>bit 4</th><th>bit 3</th><th>bit 2</th><th>bit 1</th><th>bit 0</th></tr>
<tr><th>128</th><th>64</th><th>32</th><th>16</th><th>8</th><th>4</th><th>2</th><th>1</th></tr>
<tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>U2</td><td>U1</td><td>U0</td></tr>
    </table>
    <table border="1">
<tr><th>Bit</th><th>Name</th><th>Explanation</th><th>State on Reset</th></tr>
<tr><td>U2/U1/U0</td><td>User mode interrupt selector</td><td>Selects one of the processor's three  external non-NMI interrupt
	sources as user mode interrupt. I.e. when in user mode and the interrupt occurs, a standard 6502
	interrupt sequence is initiated. If the processor is in hypervisor mode and the interrupt occurs, the
	standard interrupt sequence is initiated. If the interrupt is to be forwarded to the 
	user mode, the hypervisor mode interrupt routine has to explicitely setup the user mode stack
	and jump there.</td><td>000 = no interrupt source</td></tr>
    </table>
    </desc>
  </subsection>
   <subsection toc="regmem" name="Memory Management Register">
    <desc><p>The container management has a number of register sets. Each set contains three full size (W bits) 
	registers:</p>
    <table border="1">
	<tr><th>Container-Register</th><th>Definition</th><th>Comment</th></tr>
	<tr><td>Addr/matchcode mask</td><td>0-7: matchcode mask<br/>
					8-W: address mask</td><td></td></tr>
	<tr><td>Addr/matchcode compare value</td><td>0-7: matchcode compare value<br/>
					8-W: address compare value</td><td></td></tr>
	<tr><td>Addr offset/container control</td><td>0-7: Container control<br/>
					8-W: address offset value</td><td></td></tr>
    </table><p>
	There can be any number of register sets. The number can be read from a configuration register. 
	If there are register sets, there must be at least four sets.
	For a full explanation see below.
    </p>
    </desc>
  </subsection>
  </section>

  <section toc="overview" name="65k Opcode and Addressing Mode Overview">
     <desc><p>
	This section describes in an overview the opcodes and addressing modes of the 65k.
	</p>
     </desc>
       <subsection toc="ovops" name="Opcodes Overview">
	<desc>
<table class="optable">
<tr><th>LSB-&gt;<br/>MSB\</th><th>0</th>		<th>1</th>		<th>2</th>			<th>3</th>			<th>4</th>			<th>5</th>		<th>6</th>		<th>7</th>				<th>8</th>		<th>9</th>			<th>A</th>			<th>B</th>			<th>C</th>			<th>D</th>		<th>E</th>			<th>F</th></tr>
<tr><th>0</th>		<td>BRK</td>			<td>ORA (zp,X)</td>	<td class="c65k">LDA zp,Y</td><td class="prefix">prefix1</td>	<td class="cmos">TSB zp</td>	<td>ORA zp</td>		<td>ASL zp</td>		<td class="prefix">prefix1</td>		<td>PHP</td>		<td>ORA imm</td>		<td>ASL A</td>			<td class="prefix">prefix2</td>	<td class="cmos">TSB abs</td>	<td>ORA abs</td>	<td>ASL abs</td>		<td class="c65k">PLB</td></tr>
<tr><th>1</th>		<td>BPL rel</td>		<td>ORA (zp),Y</td>	<td class="cmos">ORA (zp)</td>	<td class="prefix">prefix1</td>	<td class="cmos">TRB zp</td>	<td>ORA zp,X</td>	<td>ASL zp,X</td>	<td class="prefix">prefix1</td>		<td>CLC</td>		<td>ORA abs,y</td>		<td class="cmos">INC A</td>	<td class="prefix">prefix2</td>	<td class="cmos">TRB abs</td>	<td>ORA abs,X</td>	<td>ASL abs,X</td>		<td class="c65k">PHB</td></tr>	
<tr><th>2</th>		<td>JSR abs</td>		<td>AND (zp,X)</td>	<td class="c65k">STA zp,Y</td><td class="prefix">prefix1</td>	<td>BIT zp</td>			<td>AND zp</td>		<td>ROL zp</td>		<td class="prefix">prefix1</td>		<td>PLP</td>		<td>AND imm</td>		<td>ROL A</td>			<td class="prefix">prefix2</td>	<td>BIT abs</td>		<td>AND abs</td>	<td>ROL abs</td>		<td class="c65k">SAB</td></tr>
<tr><th>3</th>		<td>BMI rel</td>		<td>AND (zp),Y</td>	<td class="cmos">AND (zp)</td>	<td class="prefix">prefix1</td>	<td class="cmos">BIT zp,X</td>	<td>AND zp,X</td>	<td>ROL zp,X</td>	<td class="prefix">prefix1</td>		<td>SEC</td>		<td>AND abs,Y</td>		<td class="cmos">DEC A</td>	<td class="prefix">prefix2</td>	<td class="cmos">BIT abs,X</td>	<td>AND abs,X</td>	<td>ROL abs,X</td>		<td class="c65k">PRB</td></tr>
<tr><th>4</th>		<td>RTI</td>			<td>EOR (zp,X)</td>	<td class="c65k">LDA (abs),Y</td><td class="prefix">prefix1</td><td class="c65k">FP prefix</td><td>EOR zp</td>		<td>LSR zp</td>		<td class="prefix">prefix1</td>		<td>PHA</td>		<td>EOR imm</td>		<td>LSR imm</td>		<td class="prefix">prefix2</td>	<td>JMP abs</td>		<td>EOR abs</td>	<td>LSR abs</td>		<td class="c65k">SAX</td></tr>
<tr><th>5</th>		<td>BVC rel</td>		<td>EOR (zp),Y</td>	<td class="cmos">EOR (zp)</td>	<td class="prefix">prefix1</td>	<td class="c65k">SYS prefix</td><td>EOR zp,X</td>	<td>LSR zp,X</td>	<td class="prefix">prefix1</td>		<td>CLI</td>		<td>EOR abs,Y</td>		<td class="cmos">PHY</td>	<td class="prefix">prefix2</td>	<td class="c65k">Blitter prefix</td><td>EOR abs,X</td>	<td>LSR abs,X</td>		<td class="c65k">SAY</td></tr>
<tr><th>6</th>		<td>RTS</td>			<td>ADC (zp,X)</td>	<td class="c65k">LDA (abs,X)</td><td class="prefix">prefix1</td><td class="cmos">STZ zp</td>	<td>ADC zp</td>		<td>ROR zp</td>		<td class="prefix">prefix1</td>		<td>PLA</td>		<td>ADC imm</td>		<td>ROR A</td>			<td class="prefix">prefix2</td>	<td>JMP (abs)</td>		<td>ADC abs</td>	<td>ROR abs</td>		<td class="c65k">SXY</td></tr>
<tr><th>7</th>		<td>BVS rel</td>		<td>ADC (zp),Y</td>	<td class="cmos">ADC (zp)</td>	<td class="prefix">prefix1</td>	<td class="cmos">STZ zp,X</td>	<td>ADC zp,X</td>	<td>ROR zp,X</td>	<td class="prefix">prefix1</td>		<td>SEI</td>		<td>ADC abs,Y</td>		<td class="cmos">PLY</td>	<td class="prefix">prefix2</td>	<td class="cmos">JMP (abs,X)</td><td>ADC abs,X</td>	<td>ROR abs,X</td>		<td class="c65k">NOP zp</td></tr>
<tr><th>8</th>		<td class="cmos">BRA rel</td>	<td>STA (zp,X)</td>	<td class="c65k">BSR rel</td>	<td class="prefix">prefix1</td>	<td>STY zp</td>			<td>STA zp</td>		<td>STX zp</td>		<td class="prefix">prefix1</td>		<td>DEY</td>		<td class="cmos">BIT imm</td>	<td>TXA</td>			<td class="prefix">prefix2</td>	<td>STY abs</td>		<td>STA abs</td>	<td>STX abs</td>		<td class="c65k">NOP abs</td></tr>
<tr><th>9</th>		<td>BCC rel</td>		<td>STA (zp),Y</td>	<td class="cmos">STA (zp)</td>	<td class="prefix">prefix1</td>	<td>STY zp,X</td>		<td>STA zp,X</td>	<td>STX zp,Y</td>	<td class="prefix">prefix1</td>		<td>TYA</td>		<td>STA abs,Y</td>		<td>TXS</td>			<td class="prefix">prefix2</td>	<td class="cmos">STZ abs</td>	<td>STA abs,X</td>	<td class="cmos">STZ abs,X</td>	<td class="c65k">TPA</td></tr>
<tr><th>A</th>		<td>LDY imm</td>		<td>LDA (zp,X)</td>	<td>LDX imm</td>		<td class="prefix">prefix1</td>	<td>LDY zp</td>			<td>LDA zp</td>		<td>LDX zp</td>		<td class="prefix">prefix1</td>		<td>TAY</td>		<td>LDA imm</td>		<td>TAX</td>			<td class="prefix">prefix2</td>	<td>LDY abs</td>		<td>LDA abs</td>	<td>LDX abs</td>		<td class="c65k">SWP</td></tr>
<tr><th>B</th>		<td>BCS rel</td>		<td>LDA (zp),Y</td>	<td class="cmos">LDA (zp)</td>	<td class="prefix">prefix1</td>	<td>LDY zp,X</td>		<td>LDA zp,X</td>	<td>LDX zp,Y</td>	<td class="prefix">prefix1</td>		<td>CLV</td>		<td>LDA abs,Y</td>		<td>TSX</td>			<td class="prefix">prefix2</td>	<td>LDY abs,X</td>		<td>LDA abs,X</td>	<td>LDX abs,Y</td>		<td class="c65k">CLX</td></tr>
<tr><th>C</th>		<td>CPY imm</td>		<td>CMP (zp,X)</td>	<td class="c65k">STA (abs),Y</td><td class="prefix">prefix1</td><td>CPY zp</td>			<td>CMP zp</td>		<td>DEC zp</td>		<td class="prefix">prefix1</td>		<td>INY</td>		<td>CMP imm</td>		<td>DEX</td>			<td class="prefix">prefix2</td>	<td>CPY abs</td>		<td>CMP abs</td>	<td>DEC abs</td>		<td class="c65k">CLY</td></tr>
<tr><th>D</th>		<td>BNE rel</td>		<td>CMP (zp),Y</td>	<td class="cmos">CMP (zp)</td>	<td class="prefix">prefix1</td>	<td class="c65k">QUICK prefix</td><td>CMP zp,X</td>	<td>DEC zp,X</td>	<td class="prefix">prefix1</td>		<td>CLD</td>		<td>CMP abs,Y</td>		<td class="cmos">PHX</td>	<td class="prefix">prefix2</td>	<td class="c65k">JSR (abs)</td>	<td>CMP abs,X</td>	<td>DEC abs,X</td>		<td class="unused"></td></tr>
<tr><th>E</th>		<td>CPX imm</td>		<td>SBC (zp,X)</td>	<td class="c65k">STA (abs,X)</td><td class="prefix">prefix1</td><td>CPX zp</td>			<td>SBC zp</td>		<td>INC zp</td>		<td class="prefix">prefix1</td>		<td>INX</td>		<td>SBC imm</td>		<td>NOP</td>			<td class="prefix">prefix2</td>	<td>CPX abs</td>		<td>SBC abs</td>	<td>INX abs</td>		<td class="c65k">CLA</td></tr>
<tr><th>F</th>		<td>BEQ rel</td>		<td>SBC (zp),Y</td>	<td class="cmos">SBC (zp)</td>	<td class="prefix">prefix1</td>	<td class="c65k">TRAP</td>	<td>SBC zp,X</td>	<td>INC zp,X</td>	<td class="prefix">prefix1</td>		<td>SED</td>		<td>SBC abs,Y</td>		<td class="cmos">PLX</td>	<td class="prefix">prefix2</td>	<td class="c65k">JSR (abs,X)</td><td>SBC abs,X</td>	<td>INC abs,X</td>		<td class="c65k">EXT prefix</td></tr>
</table><p>Legend:</p>
<table class="optable">
<tr><td>NMOS Opcodes</td><td class="cmos">CMOS Opcodes</td><td class="c65k">New 65k opcodes</td><td class="prefix">65k Prefix codes</td><td class="unused">Unused/Reserved</td></tr>
</table>
	<p>
	Some of the opcodes are named prefix1 and prefix2, for those see below. 
	Others are named like "QUICK prefix" or "EXT prefix".
	These opcodes provide a way to extend the opcode list by having a second opcode byte follow the prefix. Thus there 
	could be 256 additional "QUICK" opcodes, and 256 additional "MMU opcodes" and so on. These opcode planes are
	described below.
	</p><p>
	Here is a short description of the new opcodes:
	</p>
	<ul>
	<li>BSR - branch subroutine</li>
	<li>TPA - Transfer Program counter to Accumulator [1]</li>
	<li>SWP - swap upper and lower part nibble / byte / word / long word of a byte / word / long / longlong operand
		in Accumulator</li>
	<li>PLB - PulL Base register: pull the base offset register from the stack</li>
	<li>PHB - PusH Base register: push the base offset register to the stack</li>
	<li>SAB - Swap Accumulator and Base register [1]</li>
	<li>PRB - Push and Replace Base register: Push base offset register to the stack, then transfer accumulator to
		the base register</li>
	<li>SAX - Swap Accumulator and X register [1]</li>
	<li>SAY - Swap Accumulator and Y register [1]</li>
	<li>SXY - Swap X register and Y register [1]</li>
	<li>NOP zp - two-byte NOP (resp. 5 byte with AM prefix set)</li>
	<li>NOP abs - three-byte NOP (resp. 9 byte with AM prefix set)</li>
	<li>CLX - clear X register</li>
	<li>CLY - clear Y register</li>
	<li>CLA - clear accumulator</li>
	</ul><p>Notes:</p>
	<ol>
	<li>When the value to be written to the register is larger than the maximum value as determined by an RS prefix
		(if applicable), the overflow bit V is set</li>
	</ol>
    	</desc>
       </subsection>

       <subsection toc="ovadmd" name="Addressing Modes Overview">
	<desc><p>
	This section describes an overview on the addressing modes of the 65k processor. An addressing mode determines
	effective address of an operand (no matter what size the operand is). The addressing modes are 
	described in detail below.
	</p>
<table class="optable">
<tr><th>Addressing Mode</th><th>Name</th>					<th>Comment</th></tr>
<tr><td>-</td>		<td>Implied</td>					<td>Implied by the operation</td></tr>
<tr><td>A</td>		<td>Accumulator</td>					<td>Accumulator</td></tr>
<tr><td>imm</td>	<td>Immediate</td>					<td>Immediate</td></tr>
<tr><td>zp</td>		<td>Zeropage</td>					<td>Zeropage address</td></tr>
<tr><td>zp,X</td>	<td>Zeropage indexed with X</td>			<td>Zeropage address, plus content of XR</td></tr>
<tr><td>zp,Y</td>	<td>Zeropage indexed with Y</td>			<td>Zeropage address, plus content of YR</td></tr>
<tr><td>abs</td>	<td>Absolute 16&nbsp;bit</td>				<td>16&nbsp;bit address</td></tr>
<tr><td>abs,X</td>	<td>Absolute 16&nbsp;bit indexed with X</td>		<td>16&nbsp;bit address, plus content of XR</td></tr>
<tr><td>abs,Y</td>	<td>Absolute 16&nbsp;bit indexed with Y</td>		<td>16&nbsp;bit address, plus content of YR</td></tr>
<tr><td>long</td>	<td>Long 32&nbsp;bit</td>				<td>32&nbsp;bit address</td></tr>
<tr><td>long,X</td>	<td>Long 32&nbsp;bit indexed with X</td>		<td>32&nbsp;bit address, plus content of XR</td></tr>
<tr><td>long,Y</td>	<td>Long 32&nbsp;bit indexed with Y</td>		<td>32&nbsp;bit address, plus content of YR</td></tr>
<tr><td>longlong</td>	<td>Longlong 64&nbsp;bit</td>				<td>64&nbsp;bit address</td></tr>
<tr><td>longlong,X</td>	<td>Longlong 64&nbsp;bit indexed with X</td>		<td>64&nbsp;bit address, plus content of XR</td></tr>
<tr><td>longlong,Y</td>	<td>Longlong 64&nbsp;bit indexed with Y</td>		<td>64&nbsp;bit address, plus content of YR</td></tr>
<tr><td>(zp)</td>	<td>Zeropage indirect 16&nbsp;bit</td>			<td>Load effective 16&nbsp;bit address from zeropage location given</td></tr>
<tr><td>(zp),Y</td>	<td>Zeropage indirect indexed with Y 16&nbsp;bit</td>	<td>Load effective 16&nbsp;bit address from zeropage location given, then add content of YR</td></tr>
<tr><td>(zp,X)</td>	<td>Zeropage indexed with X indirect 16&nbsp;bit</td>	<td>Load effective 16&nbsp;bit address from zeropage location given plus content of XR</td></tr>
<tr><td>(abs)</td>	<td>Absolute indirect 16&nbsp;bit</td>			<td>Load effective 16&nbsp;bit address from absolute location given</td></tr>
<tr><td>(abs),Y</td>	<td>Absolute indirect indexed with Y 16&nbsp;bit</td>	<td>Load effective 16&nbsp;bit address from absolute location given, then add content of YR</td></tr>
<tr><td>(abs,X)</td>	<td>Absolute indexed with X indirect 16&nbsp;bit</td>	<td>Load effective 16&nbsp;bit address from absolute location given plus content of XR</td></tr>
<tr><td>[zp]</td>	<td>Zeropage indirect 32&nbsp;bit</td>			<td>Load effective 32&nbsp;bit address from zeropage location given</td></tr>
<tr><td>[zp],Y</td>	<td>Zeropage indirect indexed with Y 32&nbsp;bit</td>	<td>Load effective 32&nbsp;bit address from zeropage location given, then add content of YR</td></tr>
<tr><td>[zp,X]</td>	<td>Zeropage indexed with X indirect 32&nbsp;bit</td>	<td>Load effective 32&nbsp;bit address from zeropage location given plus content of XR</td></tr>
<tr><td>[abs]</td>	<td>Absolute indirect 32&nbsp;bit</td>			<td>Load effective 32&nbsp;bit address from absolute location given</td></tr>
<tr><td>[abs],Y</td>	<td>Absolute indirect indexed with Y 32&nbsp;bit</td>	<td>Load effective 32&nbsp;bit address from absolute location given, then add content of YR</td></tr>
<tr><td>[abs,X]</td>	<td>Absolute indexed with X indirect 32&nbsp;bit</td>	<td>Load effective 32&nbsp;bit address from absolute location given plus content of XR</td></tr>
<tr><td>[[zp]]</td>	<td>Zeropage indirect 64&nbsp;bit</td>			<td>Load effective 64&nbsp;bit address from zeropage location given</td></tr>
<tr><td>[[zp]],Y</td>	<td>Zeropage indirect indexed with Y 64&nbsp;bit</td>	<td>Load effective 64&nbsp;bit address from zeropage location given, then add content of YR</td></tr>
<tr><td>[[zp,X]]</td>	<td>Zeropage indexed with X indirect 64&nbsp;bit</td>	<td>Load effective 64&nbsp;bit address from zeropage location given plus content of XR</td></tr>
<tr><td>[[abs]]</td>	<td>Absolute indirect 64&nbsp;bit</td>			<td>Load effective 64&nbsp;bit address from absolute location given</td></tr>
<tr><td>[[abs]],Y</td>	<td>Absolute indirect indexed with Y 64&nbsp;bit</td>	<td>Load effective 64&nbsp;bit address from absolute location given, then add content of YR</td></tr>
<tr><td>[[abs,X]]</td>	<td>Absolute indexed with X indirect 64&nbsp;bit</td>	<td>Load effective 64&nbsp;bit address from absolute location given plus content of XR</td></tr>
<tr><td>rel</td>	<td>Relative address -128 to 127</td>			<td></td></tr>
<tr><td>relwide</td>	<td>Relative address -32768 to 32767</td>		<td></td></tr>
<tr><td>rellong</td>	<td>Relative address -2^32 to 2^32-1</td>		<td></td></tr>
<tr><td>rellonglong</td><td>Relative address -2^64 to 2^64-1</td>		<td></td></tr>
<tr><td>(E)</td>	<td>Indirect-E</td>					<td>Take the effective operand address from the E register</td></tr>
</table><p>
	You will note that not all of these addressing modes are shown in the above table. Here the prefix codes come into play.
    	</p></desc>
       </subsection>

       <subsection toc="ovpref" name="Prefix Overview">
	<desc><p>
	In the opcode map there are 32 codes designated as "prefix1" and 16 codes designated as "prefix2". These opcodes are no operations in themselves, but
	modify the following operation. The prefix has these values:</p>
<table class="bittable">
<tr><th colspan="8">prefix1</th></tr>
<tr><th>bit 7</th><th>bit 6</th><th>bit 5</th><th>bit 4</th><th>bit 3</th><th>bit 2</th><th>bit 1</th><th>bit 0</th></tr>
<tr><th>128</th><th>64</th><th>32</th><th>16</th><th>8</th><th>4</th><th>2</th><th>1</th></tr>
<tr><td>OF1</td><td>OF0</td><td>RS1</td><td>RS0</td><td>0</td><td>AM</td><td>1</td><td>1</td></tr>
</table><p>
	I.e. in prefix1 the lowest two bits are always one and bit 2 (value 4) is always zero, but all of the other five 
	bits have a special meaning.</p>
<table class="bittable">
<tr><th colspan="8">prefix2</th></tr>
<tr><th>bit 7</th><th>bit 6</th><th>bit 5</th><th>bit 4</th><th>bit 3</th><th>bit 2</th><th>bit 1</th><th>bit 0</th></tr>
<tr><th>128</th><th>64</th><th>32</th><th>16</th><th>8</th><th>4</th><th>2</th><th>1</th></tr>
<tr><td>UM</td><td>reserved</td><td>reserved</td><td>ZE</td><td>1</td><td>0</td><td>1</td><td>1</td></tr>
</table><p>
	For prefix2 the low four bit are fixed, bit 5 is the ZE bit, the other bits are reserved.
</p><p>
	The following table explains the prefix bits.
</p>
<table class="optable">
<tr><th>AM</th><th>Adressing Modes</th></tr>
<tr><td>0</td><td>normal addressing modes (8 / 16 bit)</td></tr>
<tr><td>1</td><td>extended addressing modes (32 / 64 bit)</td></tr>
<tr><th>ZE</th><th>Zero extension</th></tr>
<tr><td>0</td><td>Zero-extend values to full register width when writing to a register</td></tr>
<tr><td>1</td><td>Do not extend values to full register width when writing to a register</td></tr>
<tr><th>RS1/RS0</th><th>Register Size</th></tr>
<tr><td>0/0</td><td>8 bit register</td></tr>
<tr><td>0/1</td><td>16 bit register</td></tr>
<tr><td>1/0</td><td>32 bit register</td></tr>
<tr><td>1/1</td><td>64 bit register</td></tr>
<tr><th>OF1/OF0</th><th>Offset Register</th></tr>
<tr><td>0/0</td><td>No offset added to address</td></tr>
<tr><td>0/1</td><td>Add Program Counter (PC) to address</td></tr>
<tr><td>1/0</td><td>Add Stack Pointer (SP) to address</td></tr>
<tr><td>1/1</td><td>Add Base Offset Register (BR) to address</td></tr>
<tr><th>UM</th><th>User mode selector</th></tr>
<tr><td>0</td><td>Current mode environment (user space/hypervisor mode)</td></tr>
<tr><td>1</td><td>User mode environment, privileged operation; Stack Pointer for OF=10 is also User Space stack pointer </td></tr>
</table><p>
	These prefix opcodes modify the following opcodes in various aspects. The following opcodes
	are taken from the original 8&nbsp;bit opcodes. I.e. there could be a new opcode
	</p><pre>
	LDA.L #$12345678
	</pre><p>to load the accumulator with a long (32&nbsp;bit) value, that is implemented as
	</p><pre>
	23 A9 78 56 34 12
	</pre><p>. Here 23 is the prefix with RS=%10, i.e. 32&nbsp;bit registers, and A9 is the original
	LDA immediate opcode - only the parameter is now 4 byte (32&nbsp;bit) not 1 byte anymore.
	</p><p>
	Please note that when all variable prefix bits are zero, the original 6502 operation is executed.
	</p><p>
	Please also note that the order of the prefix bytes is well defined. prefix1 must be before prefix2,
	which is before the actual opcode. This way the prefix1 codes can be reused in the actual prefixed opcode.
	This would not be the case if prefix2 was before prefix1, because then it would not be distinguishable
	of the byte following prefix2 is a prefix1 or a reused opcode.
	</p><p>
	The following table describes which prefix bit is applicable to which opcode:
	</p>
<table class="optable">
<tr><th>LSB-&gt;<br/>MSB\</th><th>0</th>		<th>1</th>				<th>2</th>				<th>3</th>						<th>4</th>				<th>5</th>				<th>6</th>				<th>7</th>						<th>8</th>			<th>9</th>				<th>A</th>			<th>B</th>		<th>C</th>				<th>D</th>				<th>E</th>				<th>F</th></tr>
<tr><th>0</th>		<td class="unused"></td>	<td>ORA (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>LDA zp,Y<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">ORA (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>TSB zp<br/>AM,OF,RS,UM</td>		<td>ORA zp<br/>AM,OF,RS,ZE,UM</td>	<td>ASL zp<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">JMP (abs)<br/>AM,OF</td>		<td class="unused"></td>	<td>ORA imm<br/>RS,ZE</td>		<td>ASL A<br/>RS,ZE</td>	<td class="x"></td>	<td>TSB abs<br/>AM,OF,RS,ZE,UM</td>	<td>ORA abs<br/>AM,OF,RS,ZE,UM</td>	<td>ASL abs<br/>AM,OF,RS,UM</td>	<td>PLB<br/>RS,ZE,UM</td></tr>
<tr><th>1</th>		<td>BPL rel<br/>RS</td>		<td>ORA (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>ORA (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">ORA (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>TRB zp<br/>AM,OF,RS,UM</td>		<td>ORA zp,X<br/>AM,OF,RS,ZE,UM</td>	<td>ASL zp,X<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">ORA (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="unused"></td>	<td>ORA abs,y<br/>AM,OF,RS,ZE,UM</td>	<td>INC A<br/>RS,ZE</td>	<td class="x"></td>	<td>TRB abs<br/>AM,OF,RS,ZE,UM</td>	<td>ORA abs,X<br/>AM,OF,RS,ZE,UM</td>	<td>ASL abs,X<br/>AM,OF,RS,UM</td>	<td>PHB<br/>RS,UM</td></tr>	
<tr><th>2</th>		<td>JSR abs<br/>AM,OF,RS</td>	<td>AND (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>STA zp,Y<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">AND (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>BIT zp<br/>AM,OF,RS,UM</td>		<td>AND zp<br/>AM,OF,RS,ZE,UM</td>	<td>ROL zp<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">JMP (abs),X<br/>AM,OF,UM</td>		<td class="unused"></td>	<td>AND imm<br/>RS,ZE</td>		<td>ROL A<br/>RS,ZE</td>	<td class="x"></td>	<td>BIT abs<br/>AM,OF,RS,ZE,UM</td>	<td>AND abs<br/>AM,OF,RS,ZE,UM</td>	<td>ROL abs<br/>AM,OF,RS,UM</td>	<td>SAB<br/>RS,ZE</td></tr>
<tr><th>3</th>		<td>BMI rel<br/>RS</td>		<td>AND (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>AND (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">AND (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>BIT zp,X<br/>AM,OF,RS,UM</td>	<td>AND zp,X<br/>AM,OF,RS,ZE,UM</td>	<td>ROL zp,X<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">AND (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="unused"></td>	<td>AND abs,Y<br/>AM,OF,RS,ZE,UM</td>	<td>DEC A<br/>RS,ZE</td>	<td class="x"></td>	<td>BIT abs,X<br/>AM,OF,RS,ZE,UM</td>	<td>AND abs,X<br/>AM,OF,RS,ZE,UM</td>	<td>ROL abs,X<br/>AM,OF,RS,UM</td>	<td>PRB<br/>RS,ZE,UM</td></tr>
<tr><th>4</th>		<td class="unused"></td>	<td>EOR (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>LDA (abs),Y<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">EOR (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">BSR rel<br/>RS</td>	<td>EOR zp<br/>AM,OF,RS,ZE,UM</td>	<td>LSR zp<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">LDA (abs),Y<br/>AM,OF,RS,ZE,UM</td>	<td>PHA<br/>RS,UM</td>		<td>EOR imm<br/>RS,ZE</td>		<td>LSR imm<br/>RS,ZE</td>	<td class="x"></td>	<td>JMP abs<br/>AM,OF</td>		<td>EOR abs<br/>AM,OF,RS,ZE,UM</td>	<td>LSR abs<br/>AM,OF,RS,UM</td>	<td>SAX<br/>RS,ZE</td></tr>
<tr><th>5</th>		<td>BVC rel<br/>RS</td>		<td>EOR (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>EOR (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">EOR (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">BSR rel<br/>RS</td>	<td>EOR zp,X<br/>AM,OF,RS,ZE,UM</td>	<td>LSR zp,X<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">EOR (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="unused"></td>	<td>EOR abs,Y<br/>AM,OF,RS,ZE,UM</td>	<td>PHY<br/>RS,UM</td>		<td class="x"></td>	<td class="unused"></td>		<td>EOR abs,X<br/>AM,OF,RS,ZE,UM</td>	<td>LSR abs,X<br/>AM,OF,RS,UM</td>	<td>SAY<br/>RS,ZE</td></tr>
<tr><th>6</th>		<td>RTS<br/>AM,RS</td>		<td>ADC (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>LDA (abs,X)<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">ADC (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>STZ zp<br/>AM,OF,RS,UM</td>		<td>ADC zp<br/>AM,OF,RS,ZE,UM</td>	<td>ROR zp<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">LDA (abs,X)<br/>AM,OF,RS,ZE,UM</td>	<td>PLA<br/>RS,ZE,UM</td>	<td>ADC imm<br/>RS,ZE</td>		<td>ROR A<br/>RS,ZE</td>	<td class="x"></td>	<td>JMP (abs)<br/>AM,OF</td>		<td>ADC abs<br/>AM,OF,RS,ZE,UM</td>	<td>ROR abs<br/>AM,OF,RS,UM</td>	<td>SXY<br/>RS,ZE</td></tr>
<tr><th>7</th>		<td>BVS rel<br/>RS</td>		<td>ADC (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>ADC (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">ADC (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>STZ zp,X<br/>AM,OF,RS,UM</td>	<td>ADC zp,X<br/>AM,OF,RS,ZE,UM</td>	<td>ROR zp,X<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">ADC (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="unused"></td>	<td>ADC abs,Y<br/>AM,OF,RS,ZE,UM</td>	<td>PLY<br/>RS,ZE,UM</td>	<td class="x"></td>	<td>JMP (abs,X)<br/>AM,OF</td>		<td>ADC abs,X<br/>AM,OF,RS,ZE,UM</td>	<td>ROR abs,X<br/>AM,OF,RS,UM</td>	<td>NOP zp<br/>AM</td></tr>
<tr><th>8</th>		<td>BRA rel<br/>RS</td>		<td>STA (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>BSR rel<br/>RS</td>			<td class="dup">STA (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>STY zp<br/>AM,OF,RS,UM</td>		<td>STA zp<br/>AM,OF,RS,ZE,UM</td>	<td>STX zp<br/>AM,OF,RS,UM</td>		<td class="dup"></td>					<td>DEY<br/>RS,ZE</td>		<td>BIT imm<br/>RS,ZE</td>		<td>TXA<br/>RS,ZE</td>		<td class="x"></td>	<td>STY abs<br/>AM,OF,RS,UM</td>	<td>STA abs<br/>AM,OF,RS,UM</td>	<td>STX abs<br/>AM,OF,RS,UM</td>	<td>NOP abs<br/>AM</td></tr>
<tr><th>9</th>		<td>BCC rel<br/>RS</td>		<td>STA (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>STA (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">STA (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>STY zp,X<br/>AM,OF,RS,UM</td>	<td>STA zp,X<br/>AM,OF,RS,ZE,UM</td>	<td>STX zp,Y<br/>AM,OF,RS,UM</td>	<td class="dup">STA (zp)<br/>AM,OF,RS,ZE,UM</td>	<td>TYA<br/>RS,ZE</td>		<td>STA abs,Y<br/>AM,OF,RS,UM</td>	<td>TXS<br/>RS,ZE,UM</td>	<td class="x"></td>	<td>STZ abs<br/>AM,OF,RS,UM</td>	<td>STA abs,X<br/>AM,OF,RS,UM</td>	<td>STZ abs,X<br/>AM,OF,RS,UM</td>	<td>TPA<br/>RS,ZE</td></tr>
<tr><th>A</th>		<td>LDY imm<br/>RS,ZE</td>	<td>LDA (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>LDX imm<br/>RS</td>			<td class="dup">LDA (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>LDY zp<br/>AM,OF,RS,ZE,UM</td>	<td>LDA zp<br/>AM,OF,RS,ZE,UM</td>	<td>LDX zp<br/>AM,OF,RS,ZE,UM</td>	<td class="dup"></td>					<td>TAY<br/>RS,ZE</td>		<td>LDA imm<br/>RS,ZE</td>		<td>TAX<br/>RS,ZE</td>		<td class="x"></td>	<td>LDY abs<br/>AM,OF,RS,ZE,UM</td>	<td>LDA abs<br/>AM,OF,RS,ZE,UM</td>	<td>LDX abs<br/>AM,OF,RS,ZE,UM</td>	<td>SWP<br/>RS,ZE</td></tr>
<tr><th>B</th>		<td>BCS rel<br/>RS</td>		<td>LDA (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>LDA (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">LDA (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>LDY zp,X<br/>AM,OF,RS,ZE,UM</td>	<td>LDA zp,X<br/>AM,OF,RS,ZE,UM</td>	<td>LDX zp,Y<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">LDA (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="unused"></td>	<td>LDA abs,Y<br/>AM,OF,RS,ZE,UM</td>	<td>TSX<br/>UM</td>		<td class="x"></td>	<td>LDY abs,X<br/>AM,OF,RS,ZE,UM</td>	<td>LDA abs,X<br/>AM,OF,RS,ZE,UM</td>	<td>LDX abs,Y<br/>AM,OF,RS,ZE,UM</td>	<td>CLX<br/>RS</td></tr>
<tr><th>C</th>		<td>CPY imm<br/>RS</td>		<td>CMP (zp,X)<br/>AM,OF,RS,UM</td>	<td>STA (abs),Y<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">CMP (zp,X)<br/>AM,OF,RS,UM</td>		<td>CPY zp<br/>AM,OF,RS,UM</td>		<td>CMP zp<br/>AM,OF,RS,UM</td>		<td>DEC zp<br/>AM,OF,RS,ZE,UM</td>	<td class="dup"></td>					<td>INY<br/>RS,ZE</td>		<td>CMP imm<br/>RS</td>			<td>DEX<br/>RS,ZE</td>		<td class="x"></td>	<td>CPY abs<br/>AM,OF,RS,UM</td>	<td>CMP abs<br/>AM,OF,RS,UM</td>	<td>DEC abs<br/>AM,OF,RS,UM</td>	<td>CLY<br/>RS</td></tr>
<tr><th>D</th>		<td>BNE rel<br/>RS</td>		<td>CMP (zp),Y<br/>AM,OF,RS,UM</td>	<td>CMP (zp)<br/>AM,OF,RS,UM</td>	<td class="dup">CMP (zp),Y<br/>AM,OF,RS,UM</td>		<td class="unused"></td>		<td>CMP zp,X<br/>AM,OF,RS,UM</td>	<td>DEC zp,X<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">CMP (zp)<br/>AM,OF,RS,UM</td>		<td class="unused"></td>	<td>CMP abs,Y<br/>AM,OF,RS,UM</td>	<td>PHX<br/>RS,UM</td>		<td class="x"></td>	<td>JSR (abs)<br/>AM,OF,RS,UM</td>	<td>CMP abs,X<br/>AM,OF,RS,UM</td>	<td>DEC abs,X<br/>AM,OF,RS,UM</td>	<td class="dup">JSR (abs)<br/>AM,OF,RS</td></tr>
<tr><th>E</th>		<td>CPX imm<br/>RS</td>		<td>SBC (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>STA (abs,X)<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">SBC (zp,X)<br/>AM,OF,RS,ZE,UM</td>	<td>CPX zp<br/>AM,OF,RS,UM</td>		<td>SBC zp<br/>AM,OF,RS,ZE,UM</td>	<td>INC zp<br/>AM,OF,RS,ZE,UM</td>	<td class="dup"></td>					<td>INX<br/>RS,ZE</td>		<td>SBC imm<br/>RS,ZE</td>		<td class="unused"></td>	<td class="x"></td>	<td>CPX abs<br/>AM,OF,RS,UM</td>	<td>SBC abs<br/>AM,OF,RS,ZE,UM</td>	<td>INC abs<br/>AM,OF,RS,UM</td>	<td>CLA<br/>RS</td></tr>
<tr><th>F</th>		<td>BEQ rel<br/>RS</td>		<td>SBC (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td>SBC (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">SBC (zp),Y<br/>AM,OF,RS,ZE,UM</td>	<td class="unused">TRAP<br/>RS</td>	<td>SBC zp,X<br/>AM,OF,RS,ZE,UM</td>	<td>INC zp,X<br/>AM,OF,RS,ZE,UM</td>	<td class="dup">SBC (zp)<br/>AM,OF,RS,ZE,UM</td>	<td class="unused"></td>	<td>SBC abs,Y<br/>AM,OF,RS,ZE,UM</td>	<td>PLX<br/>RS,ZE,UM</td>	<td class="x"></td>	<td>JSR (abs,X)<br/>AM,OF,RS,UM</td>	<td>SBC abs,X<br/>AM,OF,RS,ZE,UM</td>	<td>INC abs,X<br/>AM,OF,RS,UM</td>	<td class="dup">JSR (abs,X)<br/>AM,OF,RS</td></tr>
</table>	<p>
	</p><p>
	Note that the Register size option for the RTS and JSR opcodes determine the size of the 
	return address as put on the stack (with the 8&nbsp;bit register size option also mapping to the
	16&nbsp;bit address width).
	</p><p>
	The Register size option for the branch opcodes determines the size of the relative address
	offset. For the BSR opcode this is in conflict with the size options for the address on 
	the stack. Therefore there are two duplicate opcodes for BSR, which all have a different
	size of the return address on the stack.
	</p><p>
	The following sections describe the different options in mode detail:
	</p>
	<h3>Addressing Modes</h3>
	<p>The addressing modes bit AM allows to extend the existing addressing modes from zeropage (8&nbsp;bit) and
	absolute (16&nbsp;bit) to long (32&nbsp;bit) and longlong (64&nbsp;bit). The following table shows the
	modifications when AM is set.</p>
<table class="optable">
<tr><th>Original Addressing Mode</th><th>New Addressing Mode</th><th>Comment</th></tr>
<tr><td>zp</td><td>long</td><td>use a long (32&nbsp;bit) address instead of a zeropage address</td></tr>
<tr><td>zp,X</td><td>long,X</td><td>use a long (32&nbsp;bit) address instead of a zeropage address</td></tr>
<tr><td>zp,Y</td><td>long,Y</td><td>use a long (32&nbsp;bit) address instead of a zeropage address</td></tr>
<tr><td>abs</td><td>longlong</td><td>use a longlong (64&nbsp;bit) address instead of an absolute address</td></tr>
<tr><td>abs,X</td><td>longlong,X</td><td>use a longlong (64&nbsp;bit) address instead of an absolute address</td></tr>
<tr><td>abs,Y</td><td>longlong,Y</td><td>use a longlong (64&nbsp;bit) address instead of an absolute address</td></tr>
<tr><td>(zp)</td><td>[zp]</td><td>from the given zeropage location, read a long address instead of an absolute address</td></tr>
<tr><td>(zp),Y</td><td>[zp],Y</td><td>from the given zeropage location, read a long address instead of an absolute address, then add YR</td></tr>
<tr><td>(zp,X)</td><td>[zp,X]</td><td>from the given zeropage location (plus XR as given by the addressing mode), read a long address instead of an absolute address</td></tr>
<tr><td>(abs)</td><td>[abs]</td><td>from the given absolute location, read a long address instead of an absolute address</td></tr>
<tr><td>(abs),Y</td><td>[abs],Y</td><td>from the given absolute location, read a long address instead of an absolute address, then add YR</td></tr>
<tr><td>(abs,X)</td><td>[abs,X]</td><td>from the given absolute location (plus XR as given by the addressing mode), read a long address instead of an absolute address</td></tr>
<tr><td class="dup">(zp)</td><td>[[zp]]</td><td>from the given zeropage location, read a long address instead of an absolute address</td></tr>
<tr><td class="dup">(zp),Y</td><td>[[zp]],Y</td><td>from the given zeropage location, read a longlong address instead of an absolute address, then add YR</td></tr>
<tr><td class="dup">(zp,X)</td><td>[[zp,X]]</td><td>from the given zeropage location (plus XR as given by the addressing mode), read a longlong address instead of an absolute address</td></tr>
<tr><td class="dup">(abs)</td><td>[[abs]]</td><td>from the given absolute location, read a longlong address instead of an absolute address</td></tr>
<tr><td class="dup">(abs),Y</td><td>[[abs]],Y</td><td>from the given absolute location, read a longlong address instead of an absolute address, then add YR</td></tr>
<tr><td class="dup">(abs,X)</td><td>[[abs,X]]</td><td>from the given absolute location (plus XR as given by the addressing mode), read a longlong address instead of an absolute address</td></tr>
<tr><td>imm</td><td>imm</td><td>unchanged</td></tr>
<tr><td>implied</td><td>implied</td><td>unchanged</td></tr>
<tr><td>rel</td><td>rel</td><td>unchanged</td></tr>
</table><p>
	Normally not all addressing modes would be supported with direct addressing mode replacements. 
	The longlong indirect addressing modes
	are not reached. Thus the indirect opcodes are mirrored, and extended from long to longlong indirect 
	addressing modes.
	Row LSB 1 is mirrored thus to row LSB 3, as well as row LSB 2 is mirrored to LSB 7.
	These values are marked with a green background in the table. The LSB 3 and 7 rows then change from
	indirect addressing modes to longlong indirect addressing modes.
	</p><p>
	Also note that there a are no indirect addressing modes that take a long or longlong value as indirect address.
	</p><p>
	TODO: JMP and JSR opcodes?
	</p>
	<h3>Offset</h3>
	<p>
	The offset prefix bits allows to add an address offset to the effective address of the operand.
	Four options are available:
	</p><table class="optable">
	<tr><th>OF1/0</th><th>Register</th><th>Register Name</th><th>Syntax</th><th>Examples</th></tr>
	<tr><td>00</td><td>-</td><td>no register value added</td><td>-</td><td>LDA $1234</td></tr>
	<tr><td>01</td><td>PC</td><td>Program Counter</td><td>Address prefix P,</td><td>LDA P,$1234; LDA (P,$12),Y</td></tr>
	<tr><td>10</td><td>SR</td><td>Stack Pointer</td><td>Address prefix S,</td><td>LDA S,$1234; LDA [S,$23,X]</td></tr>
	<tr><td>11</td><td>BR</td><td>Base Register</td><td>Address prefix B,</td><td>LDA B,$1234; LDA B,$12,X</td></tr>
	</table><p>
	For (non-indirect) zeropage/absolute and indexed addressing modes to compute the effective address
	the standard addressing mode effective address is computed, then the register value is added to get the
	final effective address.
	</p><p>
	For the indirect addressing mode that situation is more complex. The offset register value is added
	to the zeropage or absolute address given in the opcode, to compute the indirect address.
	For indexed with XR addressing modes XR is added to this address to get the real indirect address.
	Then the effective address is read from the computed indirect address, for indexed with YR then 
	the value of YR is added to the address read, to get the real effective address. Here the offset
	is not added again.
	</p><p>
	Note that the size of the address read from the indirect address is defined by the addressing mode
	alone (which is also determined by the AM prefix bit).
	</p>
	<h3>Register Size</h3>
	<p>
	The maximum register size depends on the used processor option. Each operation has a possibly smaller width.
	The Register size prefix defines the operation width. I.e. this determines the number of bytes to read from
	memory (from the effective address), the number of bytes to store to memory, or the number bytes to use
	from resp. store in a register.
	</p><p>
	The different width prefixes are written as postfixes to the opcode:
	</p>
	<table class="optable">
	<tr><th>RS1/0</th><th>width</th><th>Postfix</th><th>Example</th></tr>
	<tr><td>00</td><td>8</td><td></td><td>LDA #$12</td></tr>
	<tr><td>01</td><td>16</td><td>.W</td><td>LDA.W #$1234</td></tr>
	<tr><td>10</td><td>32</td><td>.L</td><td>LDA.L #$12345678</td></tr>
	<tr><td>11</td><td>64</td><td>.Q</td><td>LDA.Q #$123456789ABCDEF0</td></tr>
	</table><p>
	Please note that 8&nbsp;bit width has no postfix.
	</p><p>
	TODO: rename to "OS" = "Operation size" or "OW" = "Operation width"?
	</p>
	<h3>Zero Extension</h3>
	<p>
	The registers have a defined width - depending on processor option - of 16, 32 or 64&nbsp;bit. Operations can be
	from 8 to 64&nbsp;bit. When the result of an operation is written to a memory location, the data is written
	in the same width as the operation. If the result of the operation is written to a register, the register
	is extended with zeros to full length.
	</p><p>
	For some operations the operation should only replace the lower part of the register, and keep the upper part
	of the register unmodified. This can be achieved with the ZE bit.
	</p><p>
	The ZE bit is denoted with a ".Z" bit - "no Zero extension" - to the opcode. Thus
	</p><pre>
	LDA.W #$1234
	LDA.Z #$56
	</pre><p>results in the value $1256 in the Accumulator.
    	</p>
	<h3>User Mode selector</h3>
	<p>
	Normally the opcode uses the current processor mode - user or hypervisor - to compute the correct address.
	For the supervisor mode there is an option, however, to use an address from user mode as operand.
	This is what the User Mode selector bit (UM) is for.
	</p><p>
	When the User Mode selector is set, the operand following the opcode is read from the current (hypervisor mode)
	memory environment (as defined by the matchcode). Then the processor temporarily switches to user mode, 
	using the user mode matchcode and usermode stack pointer. For non-indirect addressing modes then the operand
	is written to or read from the computed address. For indirect addressing modes the indirect address is
	read from user mode, then the actual operand is read from or written to user mode as well.
	</p><p>
	Note that this bit is a privileged operation - unavailable if no hypervisor mode option is present, and 
	trapping into an abort if executed in user mode.
	</p><p>
	With the user mode selector such operations as PHA or PLX etc can be easily redirected to the user space
	stack.
	</p>
	</desc>
       </subsection>

       <subsection toc="ovquick" name="Quick Opcodes">
	<desc><p>These opcodes are defined by the "QUICK prefix" byte, being followed by an additional opcode byte.
	These opcodes may still even be modified by the prefix1 and prefix2 opcodes though!
	</p><p>
	The QUICK opcodes provide a way to "quickly" do repetitive operations which require multiple opcodes on the 
	6502 - like INY with an increment larger than one for example.
	</p><p>
	The following table describes the opcodes:</p>
<table class="optable">
<tr><th>LSB-&gt;<br/>MSB\</th><th>0</th>	<th>1</th>		<th>2</th>		<th>3</th>		<th>4</th>		<th>5</th>		<th>6</th>		<th>7</th>		<th>8</th>		<th>9</th>		<th>A</th>		<th>B</th>		<th>C</th>	<th>D</th>	<th>E</th>	<th>F</th></tr>
<tr><th>0</th>		<td>INY #1</td>		<td>INX #1</td>		<td>INC A #1</td>	<td>ROL A #1</td>	<td>ASL A #1</td>	<td>INC #1, zp</td>	<td>ROL #1, zp</td>	<td>ASL #1, zp</td>	<td>INC #1, (E)</td>	<td>ROL #1, (E)</td>	<td>ASL #1, (E)</td>	<td>INE #1</td>		<td>INB #1</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>1</th>		<td>INY #2</td>		<td>INX #2</td>		<td>INC A #2</td>	<td>ROL A #2</td>	<td>ASL A #2</td>	<td>INC #2, zp</td>	<td>ROL #2, zp</td>	<td>ASL #2, zp</td>	<td>INC #2, (E)</td>	<td>ROL #2, (E)</td>	<td>ASL #2, (E)</td>	<td>INE #2</td>		<td>INB #2</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>2</th>		<td>INY #3</td>		<td>INX #3</td>		<td>INC A #3</td>	<td>ROL A #3</td>	<td>ASL A #3</td>	<td>INC #3, zp</td>	<td>ROL #3, zp</td>	<td>ASL #3, zp</td>	<td>INC #3, (E)</td>	<td>ROL #3, (E)</td>	<td>ASL #3, (E)</td>	<td>INE #3</td>		<td>INB #3</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>3</th>		<td>INY #4</td>		<td>INX #4</td>		<td>INC A #4</td>	<td>ROL A #4</td>	<td>ASL A #4</td>	<td>INC #4, zp</td>	<td>ROL #4, zp</td>	<td>ASL #4, zp</td>	<td>INC #4, (E)</td>	<td>ROL #4, (E)</td>	<td>ASL #4, (E)</td>	<td>INE #4</td>		<td>INB #4</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>4</th>		<td>INY #5</td>		<td>INX #5</td>		<td>INC A #5</td>	<td>ROL A #5</td>	<td>ASL A #5</td>	<td>INC #5, zp</td>	<td>ROL #5, zp</td>	<td>ASL #5, zp</td>	<td>INC #5, (E)</td>	<td>ROL #5, (E)</td>	<td>ASL #5, (E)</td>	<td>INE #5</td>		<td>INB #5</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>5</th>		<td>INY #6</td>		<td>INX #6</td>		<td>INC A #6</td>	<td>ROL A #6</td>	<td>ASL A #6</td>	<td>INC #6, zp</td>	<td>ROL #6, zp</td>	<td>ASL #6, zp</td>	<td>INC #6, (E)</td>	<td>ROL #6, (E)</td>	<td>ASL #6, (E)</td>	<td>INE #6</td>		<td>INB #6</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>6</th>		<td>INY #7</td>		<td>INX #7</td>		<td>INC A #7</td>	<td>ROL A #7</td>	<td>ASL A #7</td>	<td>INC #7, zp</td>	<td>ROL #7, zp</td>	<td>ASL #7, zp</td>	<td>INC #7, (E)</td>	<td>ROL #7, (E)</td>	<td>ASL #7, (E)</td>	<td>INE #7</td>		<td>INB #7</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>7</th>		<td>INY #8</td>		<td>INX #8</td>		<td>INC A #8</td>	<td>ROL A #8</td>	<td>ASL A #8</td>	<td>INC #8, zp</td>	<td>ROL #8, zp</td>	<td>ASL #8, zp</td>	<td>INC #8, (E)</td>	<td>ROL #8, (E)</td>	<td>ASL #8, (E)</td>	<td>INE #8</td>		<td>INB #8</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>8</th>		<td>DEY #1</td>		<td>DEX #1</td>		<td>DEC A #1</td>	<td>ROR A #1</td>	<td>LSR A #1</td>	<td>DEC #1, zp</td>	<td>ROR #1, zp</td>	<td>LSR #1, zp</td>	<td>DEC #1, (E)</td>	<td>ROR #1, (E)</td>	<td>LSR #1, (E)</td>	<td>DEE #1</td>		<td>DEB #1</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>9</th>		<td>DEY #2</td>		<td>DEX #2</td>		<td>DEC A #2</td>	<td>ROR A #2</td>	<td>LSR A #2</td>	<td>DEC #2, zp</td>	<td>ROR #2, zp</td>	<td>LSR #2, zp</td>	<td>DEC #2, (E)</td>	<td>ROR #2, (E)</td>	<td>LSR #2, (E)</td>	<td>DEE #2</td>		<td>DEB #2</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>A</th>		<td>DEY #3</td>		<td>DEX #3</td>		<td>DEC A #3</td>	<td>ROR A #3</td>	<td>LSR A #3</td>	<td>DEC #3, zp</td>	<td>ROR #3, zp</td>	<td>LSR #3, zp</td>	<td>DEC #3, (E)</td>	<td>ROR #3, (E)</td>	<td>LSR #3, (E)</td>	<td>DEE #3</td>		<td>DEB #3</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>B</th>		<td>DEY #4</td>		<td>DEX #4</td>		<td>DEC A #4</td>	<td>ROR A #4</td>	<td>LSR A #4</td>	<td>DEC #4, zp</td>	<td>ROR #4, zp</td>	<td>LSR #4, zp</td>	<td>DEC #4, (E)</td>	<td>ROR #4, (E)</td>	<td>LSR #4, (E)</td>	<td>DEE #4</td>		<td>DEB #4</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>C</th>		<td>DEY #5</td>		<td>DEX #5</td>		<td>DEC A #5</td>	<td>ROR A #5</td>	<td>LSR A #5</td>	<td>DEC #5, zp</td>	<td>ROR #5, zp</td>	<td>LSR #5, zp</td>	<td>DEC #5, (E)</td>	<td>ROR #5, (E)</td>	<td>LSR #5, (E)</td>	<td>DEE #5</td>		<td>DEB #5</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>D</th>		<td>DEY #6</td>		<td>DEX #6</td>		<td>DEC A #6</td>	<td>ROR A #6</td>	<td>LSR A #6</td>	<td>DEC #6, zp</td>	<td>ROR #6, zp</td>	<td>LSR #6, zp</td>	<td>DEC #6, (E)</td>	<td>ROR #6, (E)</td>	<td>LSR #6, (E)</td>	<td>DEE #6</td>		<td>DEB #6</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>E</th>		<td>DEY #7</td>		<td>DEX #7</td>		<td>DEC A #7</td>	<td>ROR A #7</td>	<td>LSR A #7</td>	<td>DEC #7, zp</td>	<td>ROR #7, zp</td>	<td>LSR #7, zp</td>	<td>DEC #7, (E)</td>	<td>ROR #7, (E)</td>	<td>LSR #7, (E)</td>	<td>DEE #7</td>		<td>DEB #7</td>	<td></td>	<td></td>	<td></td></tr>
<tr><th>F</th>		<td>DEY #8</td>		<td>DEX #8</td>		<td>DEC A #8</td>	<td>ROR A #8</td>	<td>LSR A #8</td>	<td>DEC #8, zp</td>	<td>ROR #8, zp</td>	<td>LSR #8, zp</td>	<td>DEC #8, (E)</td>	<td>ROR #8, (E)</td>	<td>LSR #8, (E)</td>	<td>DEE #8</td>		<td>DEB #8</td>	<td></td>	<td></td>	<td></td></tr>
</table>
	<p>Here is the description of the new opcodes:</p>
	<ul>
	<li>INE - increment E register by values 1 to 8</li>
	<li>DEE - decrement E register by values 1 to 8</li>
	<li>INB - increment B register by values 1 to 8</li>
	<li>DEB - increment B register by values 1 to 8</li>
	</ul>
	<p>Note that the zp, and (E) addressing modes can be modified by the UM prefix bit, all Y,X and AC related opcodes
	can be modified by the RS and ZE prefix. The new INE, DEE, INB, DEB opcodes always work on the full size.
	</p>
    	</desc>
       </subsection>

       <subsection toc="ovfp" name="EXT opcodes">
	<desc><p>These opcodes extend the opcode space with rarely used, but still useful general purpose
	opcodes.
	</p>
<table class="optable">
<tr><th>LSB-&gt;<br/>MSB\</th><th>0</th>		<th>1</th>			<th>2</th>				<th>3</th>	<th>4</th>			<th>5</th>			<th>6</th>			<th>7</th>	<th>8</th>	<th>9</th>			<th>A</th>		<th>B</th>	<th>C</th>			<th>D</th>			<th>E</th>			<th>F</th></tr>
<tr><th>0</th>		<td></td>			<td></td>			<td>LEA zp,Y<br/>AM,OF,UM</td>		<td></td>	<td>MVN</td>			<td></td>			<td></td>			<td></td>	<td></td>	<td>ORA (E)<br/>RS,ZE,UM</td>	<td>BCN<br/>RS</td>	<td></td>	<td>TSB (E)<br/>RS,ZE,UM</td>	<td></td>			<td>BCN (E)<br/>RS,UM</td>	<td>PLE</td></tr>
<tr><th>1</th>		<td></td>			<td></td>			<td></td>				<td></td>	<td>MVP</td>			<td></td>			<td></td>			<td></td>	<td></td>	<td></td>			<td></td>		<td></td>	<td>TRB (E)<br/>RS,ZE,UM</td>	<td></td>			<td></td>			<td>PHE</td></tr>	
<tr><th>2</th>		<td>JSR (E)<br/>RS</td>		<td></td>			<td>PEA zp,Y<br/>AM,OF,UM</td>		<td></td>	<td>FIL</td>			<td></td>			<td>ADE imm<br/>RS,ZE</td>	<td></td>	<td></td>	<td>AND (E)<br/>RS,ZE,UM</td>	<td></td>		<td></td>	<td></td>			<td></td>			<td></td>			<td>SAE</td></tr>
<tr><th>3</th>		<td></td>			<td></td>			<td></td>				<td></td>	<td></td>			<td></td>			<td></td>			<td></td>	<td></td>	<td>LDE imm<br/>RS,ZE,UM</td>	<td></td>		<td></td>	<td></td>			<td></td>			<td></td>			<td></td></tr>
<tr><th>4</th>		<td></td>			<td></td>			<td>LEA (abs),Y<br/>AM,OF,UM</td>	<td></td> 	<td></td>			<td></td>			<td>ADS imm<br/>RS,ZE,UM</td>	<td></td>	<td></td>	<td>EOR (E)<br/>RS,ZE,UM</td>	<td>TBA</td>		<td></td>	<td>JMP (E)</td>		<td></td>			<td></td>			<td></td></tr>
<tr><th>5</th>		<td></td>			<td></td>			<td></td>				<td></td>	<td></td>			<td></td>			<td></td>			<td></td>	<td></td>	<td></td>			<td></td>		<td></td>	<td></td>			<td></td>			<td></td>			<td></td></tr>
<tr><th>6</th>		<td></td>			<td></td>			<td>LEA (abs,X)<br/>AM,OF,UM</td>	<td></td>	<td></td>			<td></td>			<td>ADB imm<br/>RS,ZE</td>	<td></td>	<td></td>	<td>ORA (E)<br/>RS,ZE,UM</td>	<td>TAB</td>		<td></td>	<td></td>			<td></td>			<td></td>			<td></td></tr>
<tr><th>7</th>		<td></td>			<td></td>			<td></td>				<td></td>	<td></td>			<td></td>			<td></td>			<td></td>	<td></td>	<td></td>			<td></td>		<td></td>	<td></td>			<td></td>			<td></td>			<td></td></tr>
<tr><th>8</th>		<td>LEA rel<br/>RS,UM</td>	<td>PEA (zp,X)<br/>AM,OF,UM</td><td>PEA rel<br/>RS,UM</td>		<td></td>	<td>SCA (E)<br/>RS,UM</td>	<td>PEA zp<br/>AM,OF,UM</td>	<td></td>			<td></td>	<td></td>	<td>BIT (E)<br/>RS,ZE,UM</td>	<td>TEA</td>		<td></td>	<td></td>			<td>PEA abs<br/>AM,OF,UM</td>	<td></td>			<td></td></tr>
<tr><th>9</th>		<td></td>			<td>PEA (zp),Y<br/>AM,OF,UM</td><td>PEA (zp)<br/>AM,OF,UM</td>		<td></td>	<td>WMB<br/>UM</td>		<td>PEA zp,X<br/>AM,OF,UM</td>	<td>WMB (E)<br/>UM</td>		<td></td>	<td></td>	<td>PEA abs,Y<br/>AM,OF,UM</td>	<td>TYS<br/>UM</td>	<td></td>	<td>STZ (E)<br/>RS,UM</td>	<td>PEA abs,X<br/>AM,OF,UM</td>	<td></td>			<td></td></tr>
<tr><th>A</th>		<td>LDY (E)<br/>RS,ZE,UM</td>	<td>LEA (zp,X)<br/>AM,OF,UM</td><td>LDX (E)<br/>RS,ZE,UM</td>		<td></td>	<td>LLA (E)<br/>RS,ZE,UM</td>	<td>LEA zp<br/>AM,OF,UM</td>	<td>SBE imm<br/>RS,ZE</td>	<td></td>	<td></td>	<td>LDA (E)<br/>RS,ZE,UM</td>	<td>TAE</td>		<td></td>	<td></td>			<td>LEA abs<br/>AM,OF,UM</td>	<td></td>			<td></td></tr>
<tr><th>B</th>		<td></td>			<td>LEA (zp),Y<br/>AM,OF,UM</td><td>LEA (zp)<br/>AM,OF,UM</td>		<td></td>	<td>RMB<br/>UM</td>		<td>LEA zp,X<br/>AM,OF,UM</td>	<td>RMB (E)<br/>UM</td>		<td></td>	<td></td>	<td>LEA abs,Y<br/>AM,OF,UM</td>	<td>TSY<br/>UM</td>	<td></td>	<td></td>			<td>LEA abs,X<br/>AM,OF,UM</td>	<td></td>			<td></td></tr>
<tr><th>C</th>		<td>CPY (E)<br/>RS,UM</td>	<td></td>			<td>PEA (abs),Y<br/>AM,OF,UM</td>	<td></td>	<td></td>			<td></td>			<td>SBS imm<br/>RS,ZE,UM</td>	<td></td>	<td></td>	<td>CMP (E)<br/>RS,ZE,UM</td>	<td></td>		<td></td>	<td></td>			<td></td>			<td></td>			<td></td></tr>
<tr><th>D</th>		<td></td>			<td></td>			<td></td>				<td></td>	<td></td>			<td></td>			<td></td>			<td></td>	<td></td>	<td></td>			<td>PHE<br/>UM</td>	<td></td>	<td></td>			<td></td>			<td></td>			<td></td></tr>
<tr><th>E</th>		<td>CPX (E)<br/>RS,UM</td>	<td></td>			<td>PEA (abs,X)<br/>AM,OF,UM</td>	<td></td>	<td></td>			<td></td>			<td>SBB imm<br/>RS,ZE</td>	<td></td>	<td></td>	<td>SBC (E)<br/>RS,ZE,UM</td>	<td></td>		<td></td>	<td></td>			<td></td>			<td></td>			<td></td></tr>
<tr><th>F</th>		<td></td>			<td>WAI</td>			<td></td>				<td></td>	<td></td>			<td></td>			<td></td>			<td></td>	<td></td>	<td></td>			<td>PLE<br/>UM</td>	<td></td>	<td></td>			<td></td>			<td></td>			<td></td></tr>
</table>    
	<p>Note that including the prefix bytes an opcode may be three bytes long (prefix1, EXT prefix, and opcode). 
	Prefix2 is (currently) not used with EXT opcodes.
	</p><p>
	Here are short explanations of the new opcodes:</p>
	<ul>
	<li>LEA - Load Effective Address: compute the effective address and store it in the E (effective Address) register (always full width)</li>
	<li>LDE - Load value into E (effective address) register</li>
	<li>TAE - Transfer Accumulator to E register</li>
	<li>TEA - Transfer E register to Accumulator</li>
	<li>PEA - Push Effective Address: compute the effective address and push it on the stack [1][2]</li>
	<li>PHE - Push E register</li>
	<li>PLE - Pull E register</li>
	<li>SAE - Swap AC with E register</li>
	<li>ADE - ADd to E register</li>
	<li>ADB - ADd to B register</li>
	<li>ADS - ADd to Stack pointer</li>
	<li>SBE - SuBstract from E register</li>
	<li>SBB - SuBstract from B register</li>
	<li>SBS - SuBstract from Stack pointer</li>
	<li>BCN - Bit Count: counts 1-bits in AC or in given location, stores number of 1-bits back in AC</li>
	<li>MVN - Move block of data of size AC from XR to YR, count addresses down. All registers full size, interruptable</li>
	<li>MVP - Move block of data of size AC from XR to YR, count addresses up. All registers full size, interruptable</li>
	<li>LLA - Load Linked AC, i.e. monitor given address for changes</li>
	<li>SCA - Store Conditional AC, succeeds only if address has not been externally modified. Sets overflow V bit on error</li>
	<li>RMB - Read memory barrier: invalidates cache content (globally, or for a specific, given location)</li>
	<li>WMB - Write memory barrier: flushes dirty caches (globally, or for a specific, given location)</li>
	<li>WAI - Wait for interrupt - stops execution of current core until next interrupt</li>
	<li>FIL - Fill memory area with a byte value</li>
	</ul><p>Notes:</p>
	<ol>
	<li>The RS prefix determines the computation width of the effective address. 
		The value is always sign-extended, ZE prefix is not supported.
		The Overflow bit V is set 
		when the effective address is larger than what is possible with the given RS prefix</li>
	<li>The UM prefix selects the user mode stack pointer, so the effective address is pushed
		from hypervisor mode onto the user mode stack</li>
	</ol>
	<p>TODO: Mult/Div opcodes</p>
	</desc>
       </subsection>

       <subsection toc="ovsys" name="SYS opcodes">
	<desc><p>This section gives an overview over the system opcodes that handle system
	configuration registers etc. These opcodes are all privileged.
	</p>
<table class="optable">
<tr><th>LSB-&gt;<br/>MSB\</th><th>0</th><th>1</th>	<th>2</th>	<th>3</th>	<th>4</th>			<th>5</th>			<th>6</th>	<th>7</th>	<th>8</th>	<th>9</th>	<th>A</th>	<th>B</th>	<th>C</th>		<th>D</th>	<th>E</th>	<th>F</th></tr>
<tr><th>0</th>		<td></td>	<td>LCR imm</td><td></td>	<td></td>	<td>SENV zp</td>		<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>1</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td>SENV zp, (E)</td>		<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>	
<tr><th>2</th>		<td></td>	<td>SCR imm</td><td></td>	<td></td>	<td>BIT SR,imm<br/>RS</td>	<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>3</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td>BIT ISR,imm</td>		<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>4</th>		<td></td>	<td>BCR imm</td><td></td>	<td></td> 	<td>SMMU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td>JPU abs<br/>OF,AM</td><td></td>	<td></td>	<td></td></tr>
<tr><th>5</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td>CLEIM</td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>6</th>		<td>RTU</td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td>JPU (abs)<br/>OF,AM</td><td></td>	<td></td>	<td></td></tr>
<tr><th>7</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td>FILU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>8</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>9</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td>MVNTU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>A</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>B</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td>MVPFU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>C</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>D</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td>MVNTU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>E</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>F</th>		<td></td>	<td>STP</td>	<td></td>	<td></td>	<td>MVPTU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
</table><p>Here is a short explanation of the new opcodes</p>
	<ul>
	<li>LCR - Load value from configuration register into AC. The immediate value gives the register number.</li>
	<li>SCR - Store value from AC to configuration register. The immediate value gives the register number.</li>
	<li>BCR - BIT value from AC with configuration register. The immediate value gives the register number.</li>
	<li>JPU - Jump to user space. Read parameter, then go from hypervisor to user mode, 
			then read the effective address from the
			user mode address space (for abs indirect mode) and execute the jump</li>
	<li>RTU - return to user space from a Trap opcode: go to user mode, pull return address from user mode
			stack and execute RTS</li>
	<li>SENV - the byte operand determines the environment number, first variant: AC, XR and YR determine the 
			address mask, address value and address offset registers. Second variant: the byte operand
			determines the environment number, E gives the memory address of the address mask, value and offset</li>
	<li>CLEIM - Clear EIM: load EIM bits from IMR bits; start interrupt if ISR bits have higher interrupt than EIM</li>
	<li>SMMU - Set the MMU base configuration address (to be defined)</li>
	<li>MVNTU - MVN but target is in user space</li>
	<li>MVNFU - MVN but source is in user space</li>
	<li>MVPTU - MVP but target is in user space</li>
	<li>MVPFU - MVP but source is in user space</li>
	<li>FILU - Fill user space area (i.e. use user mode match code)</li>
	<li>STP - Stop current core until reset (core 0) resp. enabling via core control register.</li>
	</ul><p>
	Note: these have been deprecated:</p>
	<ul>
	<li>TAI - transfer accumulator to interrupt base register (deprecated, replaced by LCR/SCR)</li>
	<li>TIA - transfer interrupt base register to accumulator (deprecated, replaced by LCR/SCR)</li>
	<li>TAT - transfer accumulator to trap vector base register (deprecated, replaced by LCR/SCR)</li>
	<li>TTA - transfer trap vector base register to accumulator (deprecated, replaced by LCR/SCR)</li>
	<li>TAU - transfer accumulator to user space stack pointer -- deprecated, replaced by TXS.U and TXS.U</li>
	<li>TUA - transfer user space stack pointer to accumulator -- deprecated, replaced by TXS.U and TXS.U</li>
	<li>SHM - Set Hypervisor Match register: Store accumulator into hypervisor mode match register (deprecated, replaced by LCR/SCR)</li>
	<li>SUM - Set User mode Match register: Store accumulator into user mode match register (deprecated, replaced by LCR/SCR)</li>
	<li>LHM - Load Hypervisor Match register: Load accumulator from hypervisor mode match register (deprecated, replaced by LCR/SCR)</li>
	<li>LUM - Load User mode Match register: Load accumulator from user mode match register (deprecated, replaced by LCR/SCR)</li>
	<li>LDA SR - Load AC from status register (can do 8 or 16 bit) (deprecated, replaced by LCR/SCR)</li>
	<li>LDA ISR - Load AC from interrupt status register (can do 8 bit) (deprecated, replaced by LCR/SCR)</li>
	<li>BIT ISR - Test interrupt status register (can do 8 bit) (deprecated, replaced by BCR)</li>
	<li>AND/ORA/EOR/BIT SR - operations on the status register (can do 8, 16, or 24 (zero-extended 32) bit) (no replacement)</li>
	</ul>
	<p>
	The configuration value registers are basically constant values that the program can query from the
	processor. These values can then be used by the program to identify the processor, resp. adapt
	itself to the processor features present.
	The following processor configuration registers are defined (note narrow values are always zero-extended):</p>
<table border="1">
<tr><th>Register#</th><th>rw/ro</th><th>global/per core</th><th>Name</th><th>Width</th><th>Value</th></tr>
<tr><td>$00</td><td>ro</td><td>global</td><td>VENDOR</td><td>16&nbsp;bit</td><td>Defines the vendor of the processor.
			Currently defined are:
			<table><tr><td>$AF</td><td>A. Fachat</td></tr></table></td></tr>
<tr><td>$01</td><td>ro</td><td>per core</td><td>MC_MYCORE</td><td>W bit</td><td>Number of the core executing the load</td></tr>
<tr><td>$02</td><td>ro</td><td>global</td><td>MC_NCORE</td><td>W bit</td><td>Number of cores</td></tr>
<tr><td>$03</td><td>ro</td><td>global</td><td>MC_ACTCORE</td><td>W bit</td><td>Bitmask of active cores, can be set to start cores and cleared to stop them (except the own core)</td></tr>

<tr><td>$10</td><td>ro</td><td>per core</td><td>ST_SR</td><td>16 bit</td><td>Status register</td></tr>
<tr><td>$11</td><td>rw</td><td>global</td><td>ST_IMR</td><td>8 bit</td><td>interrupt mask register</td></tr>
<tr><td>$12</td><td>ro</td><td>global</td><td>ST_ISR</td><td>8 bit</td><td>interrupt status register</td></tr>
<tr><td>$13</td><td>ro</td><td>global</td><td>ST_EIM</td><td>8 bit</td><td>effective interrupt mask register</td></tr>
<tr><td>$14</td><td>ro</td><td>per core</td><td>ST_SP</td><td>8 bit</td><td>stack pointer (hypervisor)</td></tr>
<tr><td>$15</td><td>ro</td><td>per core</td><td>ST_USP</td><td>8 bit</td><td>stack pointer (user mode)</td></tr>
<tr><td>$16</td><td>rw</td><td>per core</td><td>ST_MH</td><td>8 bit</td><td>match code (hypervisor)</td></tr>
<tr><td>$17</td><td>rw</td><td>per core</td><td>ST_MU</td><td>8 bit</td><td>match code (user mode)</td></tr>

<tr><td>$20</td><td>rw</td><td>global</td><td>ST_IV</td><td>W bit</td><td>Interrupt vector base register</td></tr>
<tr><td>$21</td><td>rw</td><td>global</td><td>ST_AV</td><td>W bit</td><td>Abort vector base register</td></tr>
<tr><td>$22</td><td>rw</td><td>global</td><td>ST_TV</td><td>W bit</td><td>Trap vector base register</td></tr>

<tr><td>$30</td><td>ro</td><td>global</td><td>MM_CONT</td><td>8&nbsp;bit</td><td>Number of memory management containers</td></tr>
</table>
    	</desc>
       </subsection>

       <subsection toc="ovfp" name="FP opcodes">
	<desc><p>
	Note: this section still needs to be worked out.
    	</p></desc>
       </subsection>

       <subsection toc="ovmmu" name="Blitter opcodes">
	<desc><p>
	Note: this section still needs to be worked out. It is not clear if the blitter opcodes
	could not be implemented column in the SYS opcodes table. Blitter opcodes would be 
	privileged.
    	</p></desc>
       </subsection>

  </section>

  <section toc="sys" name="System Environment">
    <desc><p>
	This section describes the general system environment
    </p></desc>

    <subsection toc="reset" name="Reset">
      <desc><p>
	Upon Reset the processor fetches a two-byte Reset vector from "-4".
	In a 16&nbsp;bit processor option this translates to the original 6502's
	$FFFC reset vector.
	</p><p>
	In a system with a larger address bus, the address is sign-extended, i.e.
	the vector is either pulled from $FFFFFFFC or $FFFFFFFFFFFFFFFC.
	</p><p>
	The two-byte vector read from that address is then again sign-extended to
	compute the effective address to jump to.
	</p><p>
	Any address translation features if available are disabled on reset. I.e. the computed
	address(es) computed here are physical addresses. 
	</p><p>
	If a supervisor mode feature is available, the processor goes into supervisor mode.
	</p><p>
	Upon Reset the following vectors are used:
	</p>
	<table class="optable">
	<tr><th>Address:</th><th>Vector</th></tr>
	<tr><td>$FFFFFFFFFFFFFFFE/F</td><td>BRK/IRQ</td></tr>
	<tr><td>$FFFFFFFFFFFFFFFC/D</td><td>RESET</td></tr>
	<tr><td>$FFFFFFFFFFFFFFFA/B</td><td>NMI</td></tr>
	<tr><td>$FFFFFFFFFFFFFFF8/9</td><td>ABORT</td></tr>
	<tr><td>$FFFFFFFFFFFFFFF6/7</td><td>TRAP</td></tr>
	</table>
	<p>The IRQ vector folds all interrupts into one vector, the interrupt condition can be read from the
	EIM.</p>
	<p>Note that there is no way to determine the ABORT condition when not using the 
	abort vector table. The trap condition can be determined by reading the 
	program counter from the stack and reading the operand byte from there - but
	this is much more complicated than using the trap vector table (also this only
	works with a fixed width trap operand!)</p>
      </desc>
    </subsection>

    <subsection toc="int" name="Interrupts">
      <desc><p>
	The processor can have a number of interrupt lines. For each of the
	interrupt lines a separate interrupt vector can be used. I.e. interrupts
	are numbered, and the number is used as index in a table of interrupt vectors.
	The interrupt vectors are fetched from an address that is determined
	by the interrupt base register, IV.
	</p><p>
	The interrupt base register determines the address of a 256&nbsp;byte 
	aligned block with interrupt vectors, i.e. the register's lowest 8&nbsp;bit are unused.
	The interrupt vectors are counted up from the bottom of the block.
	</p><p>
	The interrupt vectors are (currently) always two byte, i.e. define only 
	a 16 bit address. The vector addresses are thus augmented with the 
	upper bytes of the interrupt vector register. I.e. the interrupt
	routines must be within the 64k space defined by the interrupt vector base
	register. If more space is needed, long jumps must be used.
	</p><p>
	Note: the lowest 8 bit of the vector base register are reserved and must be zero.
	In later versions these could be used to configure the vector size.
	</p><p>
	Upon reset the register is not used, instead the standard 6502 single interrupt
	vector is used at $FFFFFFFFFFFFFFFE. Only when the interrupt vector base register
	is set for the first time, the base register becomes active.
	</p>
	<table class="optable">
	<tr><th>Interrupt base:</th><th>$FFFFFFFFFFFFFF00</th></tr>
	<tr><td>$FFFFFFFFFFFFFF0E/F</td><td>Interrupt 7 vector</td></tr>
	<tr><td>$FFFFFFFFFFFFFF0C/D</td><td>Interrupt 6 vector</td></tr>
	<tr><td>$FFFFFFFFFFFFFF0A/B</td><td>Interrupt 5 vector</td></tr>
	<tr><td>$FFFFFFFFFFFFFF08/9</td><td>Interrupt 4 vector</td></tr>
	<tr><td>$FFFFFFFFFFFFFF06/7</td><td>Interrupt 3 vector</td></tr>
	<tr><td>$FFFFFFFFFFFFFF04/5</td><td>Interrupt 2 vector</td></tr>
	<tr><td>$FFFFFFFFFFFFFF02/3</td><td>Interrupt 1 vector</td></tr>
	<tr><td>$FFFFFFFFFFFFFF00/1</td><td>Interrupt 0 vector (NMI)</td></tr>
	</table>
	<p>
	The abort vector table works the same way as the interrupt vector base register.
	The abort vectors are assigned from top down though.
	</p>
	<table class="optable">
	<tr><th>Abort base:</th><th>$FFFFFFFFFFFFFF00</th></tr>
	<tr><td>$FFFFFFFFFFFFFFFE/F</td><td>BRK vector</td></tr>
	<tr><td>$FFFFFFFFFFFFFFFC/D</td><td>Reset vector</td></tr>
	<tr><td>$FFFFFFFFFFFFFFFA/B</td><td>Abort NOMEM</td></tr>
	<tr><td>$FFFFFFFFFFFFFFF8/9</td><td>Abort WPROT</td></tr>
	<tr><td>$FFFFFFFFFFFFFFF6/7</td><td>Abort NOEXEC</td></tr>
	<tr><td>$FFFFFFFFFFFFFFF4/5</td><td>Abort PRIVRTI</td></tr>
	<tr><td>$FFFFFFFFFFFFFFF2/3</td><td>Abort PRIVOP</td></tr>
	<tr><td>$FFFFFFFFFFFFFFF0/1</td><td>Abort MAXTRAP</td></tr>
	</table>
	<p>The following table describes the abort conditions:</p>
    <table border="1">
<tr><th>Name</th><th>Explanation</th></tr>
<tr><td>NOMEM</td><td>No memory mapping available for address (also user mode access on memory available only on hypervisor mode)</td></tr>
<tr><td>WPROT</td><td>Write attempt into read-only memory</td></tr>
<tr><td>NOEXEC</td><td>Opcode fetch on a no-execute memory area</td></tr>
<tr><td>PRIVRTI</td><td>Attempt to set the hypervisor bit from stack via RTI for example</td></tr>
<tr><td>PRIVOP</td><td>Attempt to execute a privileged operation</td></tr>
<tr><td>MAXTRAP</td><td>Attempt to execute a TRAP opcode with a trap number above the allowed maximum value</td></tr>
    </table>
      </desc>
    </subsection>

    <subsection toc="trap" name="Trap handling">
      <desc><p>
	The 65k has a TRAP opcode that allows to trap from a program into supervisor mode
	(if available), resp. into a system program via a given trap vector.
	The current version allows for a maximum of 255 trap vectors, as the trap operand is byte-wide.
      </p><p>
	The TMV register determines the maximum number of trap vectors allowed. Default after reset is zero,
	which means no trap vectors allowed. If a trap vector number used is lower than
	the TMV register value, the trap is allowed. Otherwise a MAXTRAP abort is initiated.
      </p><p>
	The trap handling is similar to the interrupt handling. There is a trap vector base
	register similar to the interrupt base register. Here the lowest nine bit of the
	trap vector base register are reserved and must be zero. Trap vectors are always
	two byte, the address is in the same 64k bank as the vectors.
      </p><p>
	As there are 256 trap vectors, with 2&nbsp;byte vectors the trap table is 
	512 byte. For 2&nbsp;byte vectors all but the lowest 9&nbsp;bit from the register are
	used. This way the used
	part of the register can simply be ORd with the shifted trap number to compute
	the effective vector address.
      </p>
	<table class="optable">
	<tr><th>Trap vector base:</th><th>$FFFFFFFFFFFFFE00</th></tr>
	<tr><td>$FFFFFFFFFFFFFFFE/F</td><td>TRAP #$FF</td></tr>
	<tr><td>...</td><td>...</td></tr>
	<tr><td>$FFFFFFFFFFFFFE00/1</td><td>TRAP #$00</td></tr>
	</table>
      </desc>
    </subsection>

    <subsection toc="intproc" name="Interrupt and Trap Procedure">
      <desc><p>
	What happens when an interrupt or a trap occurs? The interrupt procedure is very similar to the
	original 6502 interrupt.
      </p><p>
	Then the program counter is written to the stack. 
	As the program counter can be wider than the original 6502's program counter, the value
	written on the stack can be variable width. I.e. if the address is a "canonical address" - 
	the uppermost 33 resp. 49 bits are all ones, or all zeros (i.e. sign-extended 
	32 resp. 16 bit address values) the value written on the stack can be shortened.
      </p><p>
	After the address the extended status register is written to the stack. I.e. the 
	high status byte.
	The high status byte contains two address width bits that allow the RTI opcode to determine
	the width of the stored return address.
      </p><p>
	In case of an interrupt then the low status byte (that mirrors the original 6502 status register)
	is written to the stack. This is not done on TRAP, as the return from TRAP should not overwrite
	returned status values. Bit5 of the status byte, however, is set to 0. When pulling this
	from the stack this indicates the extended stack frame.
      </p><p>
	After that the processor goes into hypervisor mode (concerning matchcode and stack pointer).
	Then the respective address vector is fetched and jumped to.
      </p><p>
	This results in the situation that the TRAP exception stack frame as well as the
	interrupt exception stack frame are stored on the user mode stack (if execution happens
	during user mode).
	The previous hypervisor status bit is stored in the extended status register (so RTI knows
	from where to pull the exception stack frame, resp. stacked interrupts work!) 
      </p><p>
	This procedure means that similar to the 6502 no other registers are stored on the stack, 
	this must be done by the interrupt routine.
      </p></desc>
    </subsection>

    <subsection toc="intret" name="Interrupt and Trap Return">
      <desc><p>
	For the return from a TRAP, there is the RTU opcode, Return to User space. It determines the
	previous hypervisor state bit (from the current extended status byte) and determines from that
	from which enviroment (user mode or hypervisor mode stack pointer / match code) to pull the exception stack frame.
	It then pulls the extended status byte from this stack. It determines the stack frame size from there,
	pulls the return address and jumps there.
      </p><p>
	Note that to not have a possible security leak the "previous" hypervisor mode bit must not be modifiable
	from user space! It is set when entering a TRAP or interrupt vector, which are the only ways of
	entering the hypervisor mode, so hypervisor always has a valid value. When restoring the previous 
	hypervisor mode bit from an RTU or RTI opcode, it is always set.
      </p><p>
	For the return from an interrupt, there is the RTI opcode. It first determines the environment
	to pull the execption stack frame from as in the RTU opcode.
	It then pulls the status byte from this stack and restores it. If bit 5 is zero, it pulls the extended stack frame
	similar to the the TRAP opcode. It bit 5 is one, it goes into 6502 compatibility mode - pulls a two
	byte return address from the stack. 
	It then jumps to the return address.
      </p><p>
	If an RTI opcode is executed from user space, the previous hypervisor bit is cleared no matter what is
	read from the stack. When it tries to restore an extended stack with a hypervisor bit set, then
	a privilege exception is executed.
      </p></desc>
    </subsection>

    <subsection toc="jpu" name="Jump to User Mode">
      <desc><p>
	To go to a user space program - as set up by the user mode matchcode and user mode 
	stack pointer - the JPU opcode is used. It reads the operand address (from hypervisor mode),
	then clears the hypervisor bit. After that it either jumps to the operand address in
	user mode (absolute jump), or it reads the effective address from user mode (indirect jump)
	and jumps there.
      </p><p>
	To emulate the behaviour of the original 6502, you would do a</p>
	<pre>
	JPU ($FFFC)
	</pre>
      </desc>
    </subsection>

    <subsection toc="irqfw" name="Forward an interrupt to user mode">
      <desc><p>
	If you want to forward an interrupt to a user mode program, you can on one side forward the interrupt
	by using the user mode interrupt selector control bits. But this only works while in user mode.
	When in hypervisor mode, the standard interrupt procedure is initiated. To also forward this interrupt
	the following sequence has to take place:
	</p>
	<ol>
	<li>Save the registers from the hypervisor mode (in hypervisor mode, so user mode cannot modify them
		on the stack)</li>
	<li>Change the environment to the one to forward the interrupt to</li>
	<li>push an extended status byte with the hypervisor bit set onto user space stack</li>
	<li>push a standard status byte with bit5 cleared - extended stack frame marker - onto user space stack</li>
	<li>JMP.U ($FFFE)</li>
	<li>When user space executes an RTI, it finds the hypervisor bit set. This triggers 
		a privilege exception that goes to a defined entry point into the hypervisor mode</li>
	<li>Check that the RTI comes from an actual interrupt forward</li>
	<li>Clear user mode stack</li>
	<li>From the privilege exception, restore the hypervisor mode registers and execute an RTI
		in hypervisor to end the standard interrupt procedure.</li>
	</ol>
      </desc>
    </subsection>
  </section>

  <section toc="mem" name="Memory Management">
    <desc><p>
	This section describes the memory management features of the 65k. Those features are
	optional. They are decoupled from the main core by the means of "match codes".
    </p></desc>

    <subsection toc="match" name="Match code">
      <desc><p>
	The match code is an 8&nbsp;bit value set by the core, for every memory access.
	It is used by the MMU to select which translation should be used to translate from
	effective to physical address.
      </p></desc>
    </subsection>

    <subsection toc="cont" name="Container">
      <desc><p>
	Container are an optional feature together with the hypervisor mode.
	A container confines the processor into a defined address area. This is done by ANDing the
	effective address of the opcode with a bit mask, then comparing it with an address value.
	When the masked address equals the address value, the container address matches.
	Then a fixed offset is ORd with the
	result, to get the "confined address". The smallest memory area that can be confined is
	256 byte.
      </p><p>
	The MMU has a number of such container definitions. Each definition is matched against
	the current effective address coming from the CPU. As the matchable memory area is 
	at least 256 byte, the lowest 8&nbsp;bit in the mask and address value are used to match the matchcode:
	the 8&nbsp;bit matchcode is ANDed with the lowest 8 mask bits, then compared to the 
	lowest 8 offset bits. If they are equal, then the container definition matches.
      </p><p>
	If multiple containers are matching the address and match code, then the container
	definition with the lowest number is effective.
	If no container matches (e.g. upon reset) then the effective address becomes the confined
	address without any translation.
      </p><p>
	In addition to mask and offset the container definition has an extra byte in the
	low 8&nbsp;bit of the address offset that determines memory mapping metadata: </p>
	<table border="1">
	<tr><th>Bit</th><th>Name</th><th>Function</th></tr>
	<tr><td>0</td><td>VALID</td><td>If set, the address mapping is valid. If the container
				becomes effective, but the valid bit is not set, a Bus error condition
				occurs</td></tr>
	<tr><td>1</td><td>HYPERVISOR</td><td>If set, the address mapping is only available in hypevisor
				mode. If hypervisor mode is off, this mapping never matches</td></tr>
	<tr><td>2</td><td>READONLY</td><td>If set, the memory area mapped here is read-only, writes are ignored if TRAPWRITE is not set</td></tr>
	<tr><td>3</td><td>TRAPWRITE</td><td>If set, and READONLY is set, then a bus error condition occurs on writes</td></tr>
	<tr><td>4</td><td>NOEXECUTE</td><td>If set, a bus error condition occurs when the processor
				tries to read an opcode from this mapping</td></tr>
	<tr><td>5</td><td>TRANSIENT</td><td>If set, the memory address cannot be cached</td></tr>
	<tr><td>6/7</td><td>WIDTH</td><td>Memory access width. 00=8&nbsp;bit, 01=16&nbsp;bit, 10=32&nbsp;bit, 11=64&nbsp;bit. 
			If the width selected here is wider than the physical width, the upper bits are ignored on writes
			and zero on reads.</td></tr>
	</table>
      <p>
	A memory management setup to emulate a Commodore PET would for example look like (in a 32&nbsp;bit option) the
	table below, where the matchcode $12 is assumed to be the PET's matchcode, the system's I/O is at $E0000000,
	Video memory at $D0000000 and normal bus is 16&nbsp;bit. The "PET emulator" memory is at $100000000.
	</p>
      <table border="1">
	<tr><th>Container#</th><th>Addr/Matchcode Mask</th><th>Addr/Matchcode value</th><th>Addr Offset/Container Control</th></tr>
	<tr><td>0</td><td>$FFFFFF/$FF</td><td>$0000E8/$12 (256 byte at $0000E800)</td><td>$E00000/%00110001 (8 Bit, TRANSIENT, NOEXECUTE, VALID)</td></tr>
	<tr><td>1</td><td>$FFFFF0/$FF</td><td>$000080/$12 (4kB at $00008000)</td><td>$D00000/%01110001 (16 Bit, TRANSIENT, NOEXECUTE, VALID)</td></tr>
	<tr><td>2</td><td>$FFFF80/$FF</td><td>$000000/$12 (32kB at $00000000)</td><td>$100000/%01000001 (16 Bit, VALID)</td></tr>
	<tr><td>3</td><td>$FFFF80/$FF</td><td>$000080/$12 (32kB at $00008000)</td><td>$100000/%01000101 (16 Bit, READONLY, VALID)</td></tr>
      </table><p>
	Using a matchcode mask of $FE instead of $FF in the first mapping would for example allow to share the
	mapping of container #0 between matchcode $12 and $13. This allows for shared memory segments.
      </p><p>
	Also note that the matching memory areas overlap. Here the preference rule says the one with the lower container
	number is effective. 
      </p><p>
	The table shows that this type of mapping has some restrictions, it is not possible to arbitrarily map memory 
	areas around, but it can still be used flexibly. The effective addresses for this approach are all 
	starting at zero - you could for example emulate an 8k-only 6504 - but the address offset then
	translates the address to the correct physical address space.
      </p><p>
	Note: this section must be further worked over. There is no way to define a write-through cache (e.g. video memory
	could be written (slowly) to a video board, but mirrored and cached in fast memory. On the other hand is this
	situation very common? Writes to read-only memory could always trap, so TRAPWRITE would not be needed.
	Are there two WIDTH bits required? Would not one bit be enough to indicate 8&nbsp;bit access. This would
	suffice for compatibility. Also it would allow to have the default to "native" width - in the current
	proposal above the processor must know which memory access width it actually uses to write the correct
	width value.
      </p></desc>
    </subsection>
    
    <subsection toc="mmu" name="Paged Memory Management Unit (MMU)">
      <desc><p>
	TBD
      </p></desc>
    </subsection>

  </section>

  <section toc="smp" name="Multiprocessing">
      <desc><p>
	The 65k will support multiprocessing. With the LLA and SCA it supports load-linked and store-conditional
	multiprocessor-safe synchronization primitives. 
	Note that the usual read-modify write operations (ROR, ROL, LSR, ASL, INC, DEC, TSB, TRB) are in general 
	not multiprocessor-safe. They may be multicore-safe (two cores on one processor).
      </p></desc>
  </section>
   
  <closing>
@FOOTER@
  </closing>
</webpage>
