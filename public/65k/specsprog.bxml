<!DOCTYPE webpage [ <!ENTITY eacute "&#233; "> <!ENTITY nbsp "&#160;"> ]>
<webpage name="The 65k Project - Specifications">
  <author>
    <name>Andr&eacute; Fachat</name> 
    <email>@EMAIL@</email>
    <homepage>@WEBROOT@</homepage>
    <yearstart>2010</yearstart>
    <yearend>2012</yearend>
  </author>
  <toc/>
  <keywords>6502 16bit 32bit 64bit expansion</keywords>
  <metadesc>6502 16bit 32bit 64bit expansion</metadesc>
  <style>optable.css</style>
  <forum type="6502.org">http://forum.6502.org/viewtopic.php?p=12180</forum>
  <overview><p>
	This page describes resp. links to the specifications for my 65k line of processors.
	For a reasoning why a feature is implemented as it is, see the <a href="features.html">Features discussion</a>
	page.
	</p><p>
	The 65k will be available in different "sizes" - mainly in terms of register widths.
	For example options for 16&nbsp;bit, 32&nbsp;bit, and even 64&nbsp;bit registers are defined.
	The first section will thus describe the options available.
	</p><p>
	The second section will then give links to the different models, their specifications and 
	implementations.
	</p><p>
	Note that these tables are currently preliminary. The 65002 specifications 
	are generated from the same source that generates the VHDL control tables. Therefore you
	will find the specifications directly in the af65xxx folders with the reference implementation.
  </p></overview>
  <!--news>
    <item date="2011-05-01">
	An update on the extension functionality. See also the <a href="designnotes.html">Design Notes</a> for more info.
    </item>
    <item date="2011-05-01">
	Major update of the programming specs. Add the "EE" prefix bit as an example. See changes section for more details.
    </item>
    <item date="2011-01-02">
	Moved some opcodes to achieve a more regular mapping of opcodes and addressing modes
    </item>
    <item date="2010-12-22">
	Added the "NF" prefix bit.
    </item>
    <item date="2010-10-23">
	Published this page
    </item>
    <item date="2010-10-03">
	Started this page
    </item>
  </news-->
  <toc/>

  <section toc="opts" name="65k Options">
     <desc><p>This section describes the different versions of the 65k processor
	</p>
     </desc>
       <subsection toc="optswidth" name="Register Widths Options">
	<desc><p>
	The 65k will be available in different "register widths". Register here means all address registers
	(stack pointer (SP), program counter (PC), base offset register (BR)), but also all data registers (AC, XR, YR).
	This does not include the status register for example. For details see the register model documentation.
	Address and Data registers will always have the same width to accomodate for address offsets computed
	in data registers.
	</p><p>
	The following options are available:</p>
	<ul>
	<li>16&nbsp;bit - a small extension to the original 6502 programming model, the PC stays 16&nbsp;bit as 
		it already is in the 6502.</li>
	<li>32&nbsp;bit - all data and address registers extended to 32&nbsp;bit</li>
	<li>64&nbsp;bit - all data and address registers extended to 64&nbsp;bit</li>
	</ul><p>
	The original register width for most of the registers is a byte. To use the registers with more than
	8&nbsp;bit a prefix opcode to the existing 8&nbsp;bit opcodes is used. 2 bit of the prefix opcode are
	reserved for operation width, which allows to address registers as 8, 16, 32 or 64&nbsp;bit.
	</p><p>
	The different register or operand widths are noted by a prefix. These prefixes are defined and used
	here:</p>
	<table border="1">
	<tr><th>Prefix</th><th>Width</th><th>Comment</th></tr>
	<tr><td>&nbsp;</td><td>8</td><td>no prefix gives the 6502 8&nbsp;bit behaviour</td></tr>
	<tr><td>W</td><td>16</td><td>Word</td></tr>
	<tr><td>L</td><td>32</td><td>Long</td></tr>
	<tr><td>Q</td><td>64</td><td>Quadword (alternatively LL, but Q should be used)</td></tr>
	</table>
    	</desc>
       </subsection>

       <subsection toc="optsmem" name="Memory interface width">
	<desc><p>
	 The 65k will be able to use different memory width options. I.e. the external memory interface
	 of the processor can have different widths, from 8&nbsp;bit over 16&nbsp;bit to 32&nbsp;bit. In 
	 the future it is possible to do a 64&nbsp;bit memory interface.
 	</p><p>
	 Note that even though a processor variant has a wider memory interface, it can still
	 use smaller width memory as well. I.e. a 32&nbsp;bit wide memory interface can still handle
	 8 or 16&nbsp;bit memory.
    	</p></desc>
       </subsection>

       <subsection toc="optsintar" name="Integer Arithmetic (Future)">
	<desc><p>
	In the future there will be integer arithmetic in form of multiplication and division
	operations, possibly with other operations as well.
    	</p></desc>
       </subsection>

       <subsection toc="optsfloatar" name="Floating Point Arithmetic (Future)">
	<desc><p>
	In the future there will be floating point arithmetic in form of addition, substruction, 
	multiplication and division
	operations, possibly with other operations as well.
    	</p></desc>
       </subsection>

       <subsection toc="optsmmu" name="MMU Option (Future)">
	<desc><p>
	The 65k will optionally provide an MMU to translate virtual addresses (opcode effective addresses) into
	physical addresses. When the MMU is not included, virtual addresses are directly taken as physical addresses.
    	</p></desc>
       </subsection>

       <subsection toc="optscores" name="Multicore Option (Future)">
	<desc><p>
	The 65k will provide a multicore option where two (or even more) cores are integrated
	into a single processor.
    	</p></desc>
       </subsection>

       <subsection toc="optmbyte" name="Multbyte operation (Future)">
	<desc><p>
	There will be a prefix bit that extends the operations that are not full width
	to a SIMD operations. For example, if this bit is set, and an 8&nbsp;bit operation is
	performed on a 64&nbsp;bit processor, the operation is performed simultaneously on
	all eight bytes of the 64&nbsp;bit accumulator. Similarly for other combinations of
	register and operation widths.
    	</p></desc>
       </subsection>

       <subsection toc="optquick" name="QUICK operations (Future)">
	<desc><p>
	The QUICK opcodes work with a separate prefix and implement the repeated execution of 
	an existing opcode, e.g. "eight times INY"
    	</p></desc>
       </subsection>

  </section>

  <section toc="variants" name="Processor Variants">
    <desc><p>
	The following table describes the different processor variants
    </p>
	<table>
	<tr><th>Variant</th><th>CPU width (W)</th><th>Memory width (MW)</th><th>Description</th><th>link</th></tr>
	<tr><td>65002/WB</td><td>16</td><td>8</td><td rowspan="8">The /WB is the one that is closest 
		to the original 6502. All of those are being created from the same VHDL source, with
		W and MW being generic parameters.</td>
		<td rowspan="8"><a href="af65002/index.html">65002</a></td></tr>
	<tr><td>65002/WW</td><td>16</td><td>16</td></tr> 
	<tr><td>65002/LB</td><td>32</td><td>8</td></tr> 
	<tr><td>65002/LW</td><td>32</td><td>16</td></tr> 
	<tr><td>65002/LL</td><td>32</td><td>32</td></tr> 
	<tr><td>65002/QB</td><td>64</td><td>8</td></tr> 
	<tr><td>65002/QW</td><td>64</td><td>16</td></tr> 
	<tr><td>65002/QL</td><td>64</td><td>32</td></tr>
	</table> 
    </desc>
  </section>
   
  <closing>
@FOOTER@
  </closing>
</webpage>
