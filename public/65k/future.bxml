<!DOCTYPE webpage [ <!ENTITY eacute "&#233; "> <!ENTITY nbsp "&#160;"> ]>
<webpage name="The 65k Project - Future Options">
  <author>
    <name>Andr&eacute; Fachat</name> 
    <email>@EMAIL@</email>
    <homepage>@WEBROOT@</homepage>
    <yearstart>2010</yearstart>
    <yearend>2012</yearend>
  </author>
  <keywords>6502 16bit 32bit expansion</keywords>
  <metadesc>6502 16bit 32bit expansion</metadesc>
  <style>optable.css</style>
  <forum type="6502.org">http://forum.6502.org/viewtopic.php?p=12180</forum>
  <overview><p>
	This page describes the future options for my 65k line of processors.
	The current options can be found in the processor specifications, so here
	only the future features are discussed.
  </p></overview>
  <!--news>
    <item date="2011-05-01">
	An update on the extension functionality. See also the <a href="designnotes.html">Design Notes</a> for more info.
    </item>
    <item date="2011-05-01">
	Major update of the programming specs. Add the "EE" prefix bit as an example. See changes section for more details.
    </item>
    <item date="2011-01-02">
	Moved some opcodes to achieve a more regular mapping of opcodes and addressing modes
    </item>
    <item date="2010-12-22">
	Added the "NF" prefix bit.
    </item>
    <item date="2010-10-23">
	Published this page
    </item>
    <item date="2010-10-03">
	Started this page
    </item>
  </news-->
  <toc/>

 <section toc="ovquick" name="Quick Opcodes">
	<desc><p>These opcodes are defined by the "QUICK prefix" byte, being followed by an additional opcode byte.
	These opcodes may still even be modified by the prefix1 and prefix2 opcodes though!
	</p><p>
	The QUICK opcodes provide a way to "quickly" do repetitive operations which require multiple opcodes on the 
	6502 - like INY with an increment larger than one for example.
	</p><p>
	The following table describes the opcodes:</p>
<table class="optable">
<tr><th>LSB-&gt;<br/>MSB\</th><th>0</th>	<th>1</th>		<th>2</th>		<th>3</th>		<th>4</th>		<th>5</th>		<th>6</th>		<th>7</th>		<th>8</th>		<th>9</th>		<th>A</th>		<th>B</th>		<th>C</th>		<th>D</th>		<th>E</th>	<th>F</th></tr>
<tr><th>0</th>		<td>INY #1</td>		<td>INX #1</td>		<td>INC A #1</td>	<td>ROL A #1</td>	<td>ASL A #1</td>	<td>RDL A #1</td>	<td>INC #1, (E)</td>	<td>ROL #1, (E)</td>	<td>RDL #1 (E)</td>	<td>ASL #1, (E)</td>	<td>SLX #1</td>		<td>SLY #1</td>		<td>ASR A #1</td>	<td>INC #1, zp</td>		<td>ROL #1, zp</td>	<td>ASL #1, zp</td></tr>
<tr><th>1</th>		<td>INY #2</td>		<td>INX #2</td>		<td>INC A #2</td>	<td>ROL A #2</td>	<td>ASL A #2</td>	<td>RDL A #2</td>	<td>INC #2, (E)</td>	<td>ROL #2, (E)</td>	<td>RDL #2 (E)</td>	<td>ASL #2, (E)</td>	<td>SLX #2</td>		<td>SLY #2</td>		<td>ASR A #2</td>	<td>INC #1, zp</td>		<td>ROL #2, zp</td>	<td>ASL #2, zp</td></tr>
<tr><th>2</th>		<td>INY #3</td>		<td>INX #3</td>		<td>INC A #3</td>	<td>ROL A #3</td>	<td>ASL A #3</td>	<td>RDL A #3</td>	<td>INC #3, (E)</td>	<td>ROL #3, (E)</td>	<td>RDL #3 (E)</td>	<td>ASL #3, (E)</td>	<td>SLX #3</td>		<td>SLY #3</td>		<td>ASR A #3</td>	<td>INC #1, zp</td>		<td>ROL #3, zp</td>	<td>ASL #3, zp</td></tr>
<tr><th>3</th>		<td>INY #4</td>		<td>INX #4</td>		<td>INC A #4</td>	<td>ROL A #4</td>	<td>ASL A #4</td>	<td>RDL A #4</td>	<td>INC #4, (E)</td>	<td>ROL #4, (E)</td>	<td>RDL #4 (E)</td>	<td>ASL #4, (E)</td>	<td>SLX #4</td>		<td>SLY #4</td>		<td>ASR A #4</td>	<td>INC #1, zp</td>		<td>ROL #4, zp</td>	<td>ASL #4, zp</td></tr>
<tr><th>4</th>		<td>INY #5</td>		<td>INX #5</td>		<td>INC A #5</td>	<td>ROL A #5</td>	<td>ASL A #5</td>	<td>RDL A #5</td>	<td>INC #5, (E)</td>	<td>ROL #5, (E)</td>	<td>RDL #5 (E)</td>	<td>ASL #5, (E)</td>	<td>SLX #5</td>		<td>SLY #5</td>		<td>ASR A #5</td>	<td>INC #1, zp</td>		<td>ROL #5, zp</td>	<td>ASL #5, zp</td></tr>
<tr><th>5</th>		<td>INY #6</td>		<td>INX #6</td>		<td>INC A #6</td>	<td>ROL A #6</td>	<td>ASL A #6</td>	<td>RDL A #6</td>	<td>INC #6, (E)</td>	<td>ROL #6, (E)</td>	<td>RDL #6 (E)</td>	<td>ASL #6, (E)</td>	<td>SLX #6</td>		<td>SLY #6</td>		<td>ASR A #6</td>	<td>INC #1, zp</td>		<td>ROL #6, zp</td>	<td>ASL #6, zp</td></tr>
<tr><th>6</th>		<td>INY #7</td>		<td>INX #7</td>		<td>INC A #7</td>	<td>ROL A #7</td>	<td>ASL A #7</td>	<td>RDL A #7</td>	<td>INC #7, (E)</td>	<td>ROL #7, (E)</td>	<td>RDL #7 (E)</td>	<td>ASL #7, (E)</td>	<td>SLX #7</td>		<td>SLY #7</td>		<td>ASR A #7</td>	<td>INC #1, zp</td>		<td>ROL #7, zp</td>	<td>ASL #7, zp</td></tr>
<tr><th>7</th>		<td>INY #8</td>		<td>INX #8</td>		<td>INC A #8</td>	<td>ROL A #8</td>	<td>ASL A #8</td>	<td>RDL A #8</td>	<td>INC #8, (E)</td>	<td>ROL #8, (E)</td>	<td>RDL #8 (E)</td>	<td>ASL #8, (E)</td>	<td>SLX #8</td>		<td>SLY #8</td>		<td>ASR A #8</td>	<td>INC #1, zp</td>		<td>ROL #8, zp</td>	<td>ASL #8, zp</td></tr>
<tr><th>8</th>		<td>DEY #1</td>		<td>DEX #1</td>		<td>DEC A #1</td>	<td>ROR A #1</td>	<td>LSR A #1</td>	<td>RDR A #1</td>	<td>DEC #1, (E)</td>	<td>ROR #1, (E)</td>	<td>RDR #1 (E)</td>	<td>LSR #1, (E)</td>	<td>SRX #1</td>		<td>SRY #1</td>		<td>ASR #1, (E)</td>	<td>DEC #1, zp</td>		<td>ROR #1, zp</td>	<td>LSR #1, zp</td></tr>
<tr><th>9</th>		<td>DEY #2</td>		<td>DEX #2</td>		<td>DEC A #2</td>	<td>ROR A #2</td>	<td>LSR A #2</td>	<td>RDR A #2</td>	<td>DEC #2, (E)</td>	<td>ROR #2, (E)</td>	<td>RDR #2 (E)</td>	<td>LSR #2, (E)</td>	<td>SRX #2</td>		<td>SRY #2</td>		<td>ASR #2, (E)</td>	<td>DEC #1, zp</td>		<td>ROR #2, zp</td>	<td>LSR #2, zp</td></tr>
<tr><th>A</th>		<td>DEY #3</td>		<td>DEX #3</td>		<td>DEC A #3</td>	<td>ROR A #3</td>	<td>LSR A #3</td>	<td>RDR A #3</td>	<td>DEC #3, (E)</td>	<td>ROR #3, (E)</td>	<td>RDR #3 (E)</td>	<td>LSR #3, (E)</td>	<td>SRX #3</td>		<td>SRY #3</td>		<td>ASR #3, (E)</td>	<td>DEC #1, zp</td>		<td>ROR #3, zp</td>	<td>LSR #3, zp</td></tr>
<tr><th>B</th>		<td>DEY #4</td>		<td>DEX #4</td>		<td>DEC A #4</td>	<td>ROR A #4</td>	<td>LSR A #4</td>	<td>RDR A #4</td>	<td>DEC #4, (E)</td>	<td>ROR #4, (E)</td>	<td>RDR #4 (E)</td>	<td>LSR #4, (E)</td>	<td>SRX #4</td>		<td>SRY #4</td>		<td>ASR #4, (E)</td>	<td>DEC #1, zp</td>		<td>ROR #4, zp</td>	<td>LSR #4, zp</td></tr>
<tr><th>C</th>		<td>DEY #5</td>		<td>DEX #5</td>		<td>DEC A #5</td>	<td>ROR A #5</td>	<td>LSR A #5</td>	<td>RDR A #5</td>	<td>DEC #5, (E)</td>	<td>ROR #5, (E)</td>	<td>RDR #5 (E)</td>	<td>LSR #5, (E)</td>	<td>SRX #5</td>		<td>SRY #5</td>		<td>ASR #5, (E)</td>	<td>DEC #1, zp</td>		<td>ROR #5, zp</td>	<td>LSR #5, zp</td></tr>
<tr><th>D</th>		<td>DEY #6</td>		<td>DEX #6</td>		<td>DEC A #6</td>	<td>ROR A #6</td>	<td>LSR A #6</td>	<td>RDR A #6</td>	<td>DEC #6, (E)</td>	<td>ROR #6, (E)</td>	<td>RDR #6 (E)</td>	<td>LSR #6, (E)</td>	<td>SRX #6</td>		<td>SRY #6</td>		<td>ASR #6, (E)</td>	<td>DEC #1, zp</td>		<td>ROR #6, zp</td>	<td>LSR #6, zp</td></tr>
<tr><th>E</th>		<td>DEY #7</td>		<td>DEX #7</td>		<td>DEC A #7</td>	<td>ROR A #7</td>	<td>LSR A #7</td>	<td>RDR A #7</td>	<td>DEC #7, (E)</td>	<td>ROR #7, (E)</td>	<td>RDR #7 (E)</td>	<td>LSR #7, (E)</td>	<td>SRX #7</td>		<td>SRY #7</td>		<td>ASR #7, (E)</td>	<td>DEC #1, zp</td>		<td>ROR #7, zp</td>	<td>LSR #7, zp</td></tr>
<tr><th>F</th>		<td>DEY #8</td>		<td>DEX #8</td>		<td>DEC A #8</td>	<td>ROR A #8</td>	<td>LSR A #8</td>	<td>RDR A #8</td>	<td>DEC #8, (E)</td>	<td>ROR #8, (E)</td>	<td>RDR #8 (E)</td>	<td>LSR #8, (E)</td>	<td>SRX #8</td>		<td>SRY #8</td>		<td>ASR #8, (E)</td>	<td>DEC #1, zp</td>		<td>ROR #8, zp</td>	<td>LSR #8, zp</td></tr>
</table>
	<p>Here is the description of the new opcodes:</p>
	<ul>
	<li>ASR	- Arithmetic Shift Right - shift right and shift in the sign of the original value from the highest bit</li>
	<li>RDR - Rotate Direct Right - shift right, but without using the carry flag (only setting it)</li>
	<li>RDL - Rotate Direct Left - shift left, but without using the carry flag (only setting it)</li>
	<li>SLX - shift left X by 1 to 8 bit, similar to ASL</li>
	<li>SRX - right left X by 1 to 8 bit, similar to ASL</li>
	<li>SLY - shift left Y by 1 to 8 bit, similar to LSR</li>
	<li>SRY - right left Y by 1 to 8 bit, similar to LSR</li>
	</ul>
	<p>Note that the zp, and (E) addressing modes can be modified by the UM prefix bit, Y,X and AC related opcodes
	can be modified by the RS prefix. LE is not applicable as these opcodes are read-modify-write operations.
	All opcodes can be modified by the NF prefix.
	</p>
  	<p>These have been deprecated as they are redundant to ADE/SBE/ADB/SBB:</p>
	<ul>
	<li>INE - increment E register by values 1 to 8</li>
	<li>DEE - decrement E register by values 1 to 8</li>
	<li>INB - increment B register by values 1 to 8</li>
	<li>DEB - increment B register by values 1 to 8</li>
	</ul>
  	</desc>
       </section>

       <section toc="ovsys" name="SYS opcodes">
	<desc><p>This section gives an overview over the system opcodes that handle system
	configuration registers etc. These opcodes are all privileged.
	</p><p>NOTE: some of these already belong to the 65002!
	</p>
<table class="optable">
<tr><th>LSB-&gt;<br/>MSB\</th><th>0</th><th>1</th>	<th>2</th>	<th>3</th>	<th>4</th>			<th>5</th>			<th>6</th>	<th>7</th>	<th>8</th>	<th>9</th>	<th>A</th>	<th>B</th>	<th>C</th>		<th>D</th>	<th>E</th>	<th>F</th></tr>
<tr><th>0</th>		<td></td>	<td>LCR imm</td><td></td>	<td></td>	<td>SENV zp</td>		<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>1</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td>SENV zp, (E)</td>		<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>	
<tr><th>2</th>		<td></td>	<td>SCR imm</td><td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>3</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>4</th>		<td></td>	<td>BCR imm</td><td></td>	<td></td> 	<td>SMMU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td>JPU abs<br/>OF,AM</td><td></td>	<td></td>	<td></td></tr>
<tr><th>5</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td>CLEIM</td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>6</th>		<td>RTU</td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td>JPU (abs)<br/>OF,AM</td><td></td>	<td></td>	<td></td></tr>
<tr><th>7</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td>FILU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>8</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>9</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td>MVNTU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>A</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>B</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td>MVPFU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>C</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>D</th>		<td></td>	<td>WAI</td>	<td></td>	<td></td>	<td>MVNTU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>E</th>		<td></td>	<td></td>	<td></td>	<td></td>	<td></td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
<tr><th>F</th>		<td></td>	<td>STP</td>	<td></td>	<td></td>	<td>MVPTU</td>			<td></td>			<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>	<td></td>		<td></td>	<td></td>	<td></td></tr>
</table><p>Here is a short explanation of the new opcodes</p>
	<ul>
	<li>LCR - Load value from configuration register into AC. The immediate value gives the register number.</li>
	<li>SCR - Store value from AC to configuration register. The immediate value gives the register number.</li>
	<li>BCR - BIT value from AC with configuration register. The immediate value gives the register number.</li>
	<li>JPU - Jump to user space. Read parameter, then go from hypervisor to user mode, 
			then read the effective address from the
			user mode address space (for abs indirect mode) and execute the jump</li>
	<li>RTU - return to user space from a Trap opcode: go to user mode, pull return address from user mode
			stack and execute RTS</li>
	<li>SENV - the byte operand determines the environment number, first variant: AC, XR and YR determine the 
			address mask, address value and address offset registers. Second variant: the byte operand
			determines the environment number, E gives the memory address of the address mask, value and offset</li>
	<li>CLEIM - Clear EIM: load EIM bits from IMR bits; start interrupt if ISR bits have higher interrupt than EIM</li>
	<li>SMMU - Set the MMU base configuration address (to be defined)</li>
	<li>MVNTU - MVN but target is in user space</li>
	<li>MVNFU - MVN but source is in user space</li>
	<li>MVPTU - MVP but target is in user space</li>
	<li>MVPFU - MVP but source is in user space</li>
	<li>FILU - Fill user space area (i.e. use user mode match code)</li>
	<li>STP - Stop current core until reset (core 0) resp. enabling via core control register.</li>
	<li>WAI - Wait for interrupt - stops execution of current core until next interrupt</li>
	</ul><p>
	Note: these have been deprecated:</p>
	<ul>
	<li>TAI - transfer accumulator to interrupt base register (deprecated, replaced by LCR/SCR)</li>
	<li>TIA - transfer interrupt base register to accumulator (deprecated, replaced by LCR/SCR)</li>
	<li>TAT - transfer accumulator to trap vector base register (deprecated, replaced by LCR/SCR)</li>
	<li>TTA - transfer trap vector base register to accumulator (deprecated, replaced by LCR/SCR)</li>
	<li>TAU - transfer accumulator to user space stack pointer -- deprecated, replaced by TXS.U and TXS.U</li>
	<li>TUA - transfer user space stack pointer to accumulator -- deprecated, replaced by TXS.U and TXS.U</li>
	<li>SHM - Set Hypervisor Match register: Store accumulator into hypervisor mode match register (deprecated, replaced by LCR/SCR)</li>
	<li>SUM - Set User mode Match register: Store accumulator into user mode match register (deprecated, replaced by LCR/SCR)</li>
	<li>LHM - Load Hypervisor Match register: Load accumulator from hypervisor mode match register (deprecated, replaced by LCR/SCR)</li>
	<li>LUM - Load User mode Match register: Load accumulator from user mode match register (deprecated, replaced by LCR/SCR)</li>
	<li>LDA SR - Load AC from status register (can do 8 or 16 bit) (deprecated, replaced by LCR/SCR)</li>
	<li>LDA ISR - Load AC from interrupt status register (can do 8 bit) (deprecated, replaced by LCR/SCR)</li>
	<li>BIT ISR - Test interrupt status register (can do 8 bit) (deprecated, replaced by BCR)</li>
	<li>AND/ORA/EOR/BIT SR - operations on the status register (can do 8, 16, or 24 (zero-extended 32) bit) (no replacement)</li>
	</ul>

    	</desc>
       </section>

  <section toc="ovfp" name="FP opcodes">
	<desc><p>
	Note: this section still needs to be worked out.
    	</p></desc>
  </section>

  <section toc="ovmmu" name="Blitter opcodes">
	<desc><p>
	Note: this section still needs to be worked out. It is not clear if the blitter opcodes
	could be a not implemented column in the SYS opcodes table. Blitter opcodes would be 
	privileged.
    	</p></desc>

  </section>

  <section toc="mem" name="Memory Management">
    <desc><p>
	This section describes the memory management features of the 65k. Those features are
	optional. They are decoupled from the main core by the means of "match codes".
    </p></desc>

    <subsection toc="mmu" name="Paged Memory Management Unit (MMU)">
      <desc><p>
	TBD
      </p></desc>
    </subsection>

  </section>

  <section toc="smp" name="Multiprocessing">
      <desc><p>
	The 65k will support multiprocessing. With the LLA and SCA it supports load-linked and store-conditional
	multiprocessor-safe synchronization primitives. 
	Note that the usual read-modify write operations (ROR, ROL, LSR, ASL, ASR, RDR, RDL, INC, DEC, TSB, TRB, SLY, SRY, SLX, SRX) 
	are in general not multiprocessor-safe. They may be multicore-safe (two cores on one processor).
      </p></desc>
  </section>

  <closing>
@FOOTER@
  </closing>
</webpage>
