<?xml version="1.0"?>
<board>
	<name>CS/A65 RAMDisk</name>
	<keywords>CSA65 6502 ramdisk SIMM</keywords>
        <lastmodified>2011-01-09</lastmodified>
	<desc><p>
		This board uses the (now outdated) 30-pin SIMM memory modules
		to build a RAM disk with up to 16Mbyte. The memory
		is accessible via a single register, using an auto-increment
		byte address counter (8-bit byte address within page only).
		</p><p>
		Two major board versions are available. The first one is more a concept
		and is built from TTL logic glue. The second one uses a CPLD to implement
		the DRAM controller.
		</p><p>
		The CPLD board is brand new and undergoing tests. With version 2.0E the power
		glitch has been fixed - the '245 driver was activated too early so it reached
		into the previous refresh cycle. The board works stable at 1MHz bus 
		frequency, with 4 DRAM modules. At 2MHz write timing is stable, but there are read
		glitches (repeated reads vary). On the scope the signals look fine, from timing
		and shape, and seem to work for writing, so I am investigating 
		bus terminators for the main system bus now.
		</p><p>
		The current status of the TTL board is that it works in some specific 
		configurations. I built the board over two years ago and 
		encountered a number of errors (see notes below). 
		Only recently I have tested it with the
		65816 CPU board, where it works with 3 modules with 1MByte each,
		but not 4 modules. I still have to retest with other CPU boards and 
		3 modules only.
		</p><p>
		Further tests still have to be performed, but I am not sure how far
		I will go into this with this design version. I had a discussion with
		Bil Herd - yes, the designer of the Commodore 128 - who suggested 
		some improvements:
		</p>
		<ul><li>Use a state machine and a GAL to create a simple DRAM controller
			and not rely on gate delay times to create signals. 
			I found the 8296 timing signal generation a good example for such a
			system.</li>
		<li>The board layout used could use some improvements in the layout of the
			power supply lines, but also the address and data lines. </li>
		<li>The board lacks series resistors, and termination resistors, so 
			signal reflections could easily be a problem.</li>
		<li>The /RAS signal is always sent to all modules - on a CPU read or write
			cycle only the active module needs it. This could be a reason for
			the problems below, which are possibly power supply related and
			if all modules draw power at the same time the actual access might
			fail.</li>
		<li>Maybe even use an FPGA to implement a DRAM controller</li>
		</ul>
		<p>See the <a href="../../icaphw/design.html">this page</a> for the full discussion</p>
		<p>The CPLD-based design for this board reflects these discussions.</p>
                <div class="rightimg">
                     <a href="board.png"><img width="300px" src="board-small.png"/></a><br/>The Ethernet board in
                                              the '4245 option.
                </div>
	</desc>
	<!--diagram>
		<file>keyemu.gif</file>
		<desc>The block diagram shows the dual access to the 
			shared memory.
		</desc>
	</diagram-->
	<rev>
		<version>2.0F</version>
		<status>prototype</status>
		<note type="msg">
			This improves on the 2.0E version by adding more bypass capacitors, esp. the one for IC2 that
			was missing. Two of them are tantals and the CPLD supply voltage is routed over them in the layout.
		</note>
		<note type="msg">
			The VHDL has some timing improvements. The 2.0E was still producing a heavy jitter on the power
			signal, which is now gone.
		</note>
		<file ltype="schem" ptype="esch">csa_ramdisk-v2.0f.sch</file>
		<file ltype="schem" ptype="png">csa_ramdisk-v2.0f-sch.png</file>
		<file ltype="layout" ptype="ebrd">csa_ramdisk-v2.0f.brd</file>
		<file ltype="layout" ptype="png">csa_ramdisk-v2.0f-brd.png</file>
                <file ltype="logic" ptype="vhd" note="CPLD VHDL source">dramctrl-v2.0f.vhd</file>
                <file ltype="logic" ptype="ucf" note="CPLD constraints file (pin mapping)">dramctrl-v2.0f.ucf</file>
                <file ltype="logic" ptype="jed" note="CPLD compiled source">dramctrl-v2.0f.jed</file>
                <file ltype="driver" ptype="tgz" note="Test programs">ramdisk-tests.tar.gz</file>
	</rev>
	<rev>
		<version>2.0E</version>
		<status>prototype</status>
		<note type="msg">
			This board works stable at 1MHz system bus frequency, tested with up to 4 modules with 1 MByte each.
		</note>
		<note type="msg">
			I currently use 4k7 Ohm terminators both to GND and to VCC.
		</note>
		<note type="msg">
			Compared to the 2.0D it has only a small layout fix (so the GND for the '245 driver is
			routed directly to its bypass cap, not closer to the DRAM GND... The CPLD has fixed timing,
			and some glitch prevention from the main bus. The '245 can now be 'LS or 'ALS.
		</note>
		<file ltype="schem" ptype="esch">csa_ramdisk-v2.0e.sch</file>
		<file ltype="schem" ptype="png">csa_ramdisk-v2.0e-sch.png</file>
		<file ltype="layout" ptype="ebrd">csa_ramdisk-v2.0e.brd</file>
		<file ltype="layout" ptype="png">csa_ramdisk-v2.0e-brd.png</file>
                <file ltype="logic" ptype="vhd" note="CPLD VHDL source">dramctrl-v2.0e.vhd</file>
                <file ltype="logic" ptype="ucf" note="CPLD constraints file (pin mapping)">dramctrl-v2.0e.ucf</file>
                <file ltype="logic" ptype="jed" note="CPLD compiled source">dramctrl-v2.0e.jed</file>
                <file ltype="driver" ptype="tgz" note="Test programs">ramdisk-tests.tar.gz</file>
	</rev>
	<rev>
		<version>2.0D</version>
		<status>prototype</status>
		<note type="msg">
			This is a complete redesign - using a CPLD instead of 
			a set of TTL logic glue. Also it now adds - by design -
			series and termination resistor networks to improve
			signal quality.
		</note>
		<note type="msg">
			The /CAS, /RAS, and DRAM address lines have series as well as termination
			resistors. I found that the terminator combination in the schematics (2k2/3k3) seems to
			draw a lot of current from the CPLD. I currently use a 4k7 terminator to ground,
			but none to VCC.
		</note>
		<note type="msg">
			I've tested the board with three types of SIMM modules. One is a three-chip low profile module
			with parity (which isn't used), one is an industry module with nine separate SMD memory chips (i.e. also with
			parity), and the third one is simple board where I soldered eight separate chips (through hole).
			All modules have 1MByte (although I thought the three-chip module would be 4MByte, I cannot remember
			giving this one away, just as I cannot see a defect in the address decoding).
		</note>
		<note type="warn">
			The '245 bus driver MUST be an 'LS type, not an 'ALS. If you use an 'ALS,
			it somehow at some point seems to drive against the DRAM while reading.
			I found ripples of up to 550mV on the power supply lines on both(!) sides
			of the board (bus power supply and external power supply)
			when using the 'ALS type. Even when the external power supply was regulated
			out of a 12V that did not show those ripples.
			Shortening the active period (/EN) for example by masking the signal with RAS
			helps with the power ripples - but makes the data unreliable. The 'LS seems to
			work fine so far.
		</note>
		<file ltype="schem" ptype="esch">csa_ramdisk-v2.0d.sch</file>
		<file ltype="schem" ptype="png">csa_ramdisk-v2.0d-sch.png</file>
		<file ltype="layout" ptype="ebrd">csa_ramdisk-v2.0d.brd</file>
		<file ltype="layout" ptype="png">csa_ramdisk-v2.0d-brd.png</file>
                <file ltype="logic" ptype="vhd" note="CPLD VHDL source">dramctrl-v2.0d.vhd</file>
                <file ltype="logic" ptype="ucf" note="CPLD constraints file (pin mapping)">dramctrl-v2.0d.ucf</file>
                <file ltype="logic" ptype="jed" note="CPLD compiled source">dramctrl-v2.0d.jed</file>
                <file ltype="driver" ptype="tgz" note="Test programs">ramdisk-tests.tar.gz</file>
	</rev>
	<rev>
		<version>1.0C</version>
		<status>buggy</status>
		<note type="warn">
			With the 65816 CPU board the RAMDisk has been tested
			and found working for up to 3 modules with 1MByte each.
			With 4 modules certain RAMDisk addresses do not seem
			to work properly. <br/>Tests with larger modules (4M)
			still have to be performed.
		</note>
		<note type="warn"><p>This is the current set of errors.
			The spurious counter pulses seem gone:</p>
<p>
1) I wrote some test programs (not yet very sophisticated, but working
The programs work (so far) in the lowest 64k of the RAMDisk.
What I found out that there are only two addresses in a page, that
give problems - $45 and $65. And that only on some of the pages,
pages $1x, $5x, $9x, $dx.
Interestingly the two addresses have different problems:
</p><ol>
<li>when writing the byte offset in the page (or its invers) into the byte,
   both addresses show read mismatches. A printout of the values shows
   that mostly the value is converted from $45->$65 for the $45 case.
   $65 results in high nibble 2,4,6,a,e and low nibble 1,4,5,7,d
   in combinations. When I write the invers of the value, interestingly
   $45 (xor $ff) still gets $65 (xor $ff), while $65 is inconclusive.
   For a further analysis I guess I have to save that
   on disk and run an analyzer program on the PC on it, if necessary.</li>
<li>when writing the page address into the byte (or its invers),
   only $65 shows mismatch</li>
<li>when I write the 256 pages once, and read them each 256 times, $45
   consistently has an error count that is a multiple of 256, which
   indicates a write error, while $65 has a error count where the low
   byte is not 0, which proves a read problem.</li>
<li>all other addresses are rock solid.</li>
<li>same behaviour appears when using a different RAM module, or a
   different bank in the same module.</li>
</ol><p>
I don't yet know what to make of that, though. The bit pattern don't
make sense to me, esp. address bits 12/13 (that seem to have to be fixed
to 1/0 to give problems) and bit 5 (that seems to give problems) are
handled in different ICs.
</p><p>
2) I scoped the supply lines for the ICs and the DRAM modules. I found
a jitter of up to .3 Volts on each line (GND and VCC). So I added
a .1uF multilayer capacitor to the 'LS257 that generate the
multiplexed RAM address lines, and a 1u MLC in parallel to the
already existing capacitors in the DRAM supply lines. The jitter
did not improve much, although I had one effect: before adding the caps
the problems mentioned above in 1) were also seen in addresses $47 and
$67, and sometimes $44, $48, $64 and $68 - which is fixed now.
</p>		</note>
		<note type="msg">
			I have created this board by modifying the 1.0A board.
			Currently no layout is available.
		</note>
		<file ltype="schem" ptype="esch">csa_ramdisk-v1.0c.sch</file>
		<file ltype="schem" ptype="png">csa_ramdisk_v1.0c-sch.png</file>
	</rev>
	<rev>
		<version>1.0B</version>
		<status>buggy</status>
		<note type="warn">
			The board timing is not yet fully working.
		</note>
		<note type="stop">
			This board currently has a problem with the
			counter on read accesses. Spurious read strobes
			appear that increase the counter on read accesses
			(but not on write accesses). I do not yet have
			found the source of this problem.
		</note>
		<file ltype="schem" ptype="esch">csa_ramdisk-v1.0b.sch</file>
		<file ltype="schem" ptype="png">csa_ramdisk_v1.0b-sch.png</file>
		<file ltype="layout" ptype="ebrd">csa_ramdisk-v1.0b.brd</file>
		<file ltype="layout" ptype="png">csa_ramdisk_v1.0b-brd.png</file>
	</rev>
	<rev>
		<version>1.0A</version>
		<status>buggy</status>
		<note type="warn">
			The board timing is not yet fully working.
		</note>
		<note type="stop">
			This board currently has a problem with the
			counter on read accesses. Spurious read strobes
			appear that increase the counter on read accesses
			(but not on write accesses). I do not yet have
			found the source of this problem.
		</note>
		<note type="stop">
			The board has a timing problem. The delayed
			2Phi2 signal used with RWDATA by IC6C to generate the 
			input to IC12A comes to fast. This is fixed in V1.0B.
		</note>
		<note type="stop">
			The dynamic RAM draws a lot of power. The CSA PWR
			board checks the supply voltage, so if this board
			is plugged in, the supply voltage drops below
			the RESET watcher threshold, and /RESET is asserted.
			V1.0B contains an additional power supply plug.
		</note>
		<file ltype="schem" ptype="esch">csa_ramdisk-v1.0a.sch</file>
		<file ltype="schem" ptype="png">csa_ramdisk_v1.0a-sch.png</file>
		<file ltype="layout" ptype="ebrd">csa_ramdisk-v1.0a.brd</file>
		<file ltype="layout" ptype="png">csa_ramdisk_v1.0a-brd.png</file>
		<file ltype="photo" ptype="jpg" note="On the left you can see the floppy-type power connector cable I soldered to the bottom">ramdisk_v1.0a-1.png</file>
		<file ltype="photo" ptype="jpg">ramdisk_v1.0a-2.png</file>
	</rev>
</board>
