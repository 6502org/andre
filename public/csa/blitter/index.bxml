<!DOCTYPE webpage [ <!ENTITY eacute "&#233; "> <!ENTITY nbsp "&#160;"> ]>
<webpage name="Blitter">
  <author>
    <name>Andr&eacute; Fachat</name> 
    <email>@EMAIL@</email>
    <homepage>@WEBROOT@</homepage>
    <yearstart>2007</yearstart>
    <yearend>2010</yearend>
  </author>
  <keywords>6502 blitter block transfer engine</keywords>
  <metadesc>6502 block transfer engine</metadesc>
  <overview><p>Transfering a block of bytes from one memory location to another
	using the CPU can take a lot of time. A simple transfer loop using absolute
	addressing uses about 13 cycles per byte. Using zeropage indexed addressing 
	it takes even more. That is the reason why computers like the Amiga or the
	later Atari ST have block transfer engines, or PCs have DMA engines in the chipset.
	The 65816 chip even includes special opcodes to do block transfers, with a rate 
	of seven cycles per byte.
	</p><p>
	I thought I should add a block tranfer engine to the CS/A system. 
	Back then in 2007 I did a first design - and utterly failed. It implemented
	two address registers, with a separate adder/incrementer and buffers for each address,
	so it took a whole lot of board space, so I wasn't able to actually place and 
	route it. You can see the design below as V1.
	</p><p>
	In 2010 I had a better look into CPU architectures, and I got the idea that
	I could build a blitter using something similar to a CPU architecture. Using 
	an architecture with address registers, shared busses, and a single ALU I was
	able to produce a new design (see V2 below) that does not need as much board
	space and that I was able to place and route with SMD technology.
	</p><p>
	In the <a href="works.html">How it works</a> page I have described how the
	board works in detail.
	</p>
  </overview>
  <news>
    <item date="2010-09-17">
	Started this page
    </item>
  </news>
  <toc/>

  <!--section toc="main" name="Differences in Software">
     <desc>
     </desc>
     <subsection toc="orig" name="Original ROMs ($C000-$FFFF)">
	<desc>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>
     <subsection toc="orig" name="Original ROMs ($C000-$FFFF)">
	<desc>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>
     <subsection toc="orig" name="Original ROMs ($C000-$FFFF)">
	<desc>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>
  </section>

  <section toc="main" name="Differences in Software">
     <desc>
     </desc>
     <subsection toc="orig" name="Original ROMs ($C000-$FFFF)">
	<desc>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>
     <subsection toc="orig" name="Original ROMs ($C000-$FFFF)">
	<desc>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>
     <subsection toc="orig" name="Original ROMs ($C000-$FFFF)">
	<desc>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>
  </section>

  <section toc="main" name="Differences in Software">
     <desc>
     </desc>
     <subsection toc="orig" name="Original ROMs ($C000-$FFFF)">
	<desc>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>
     <subsection toc="orig" name="Original ROMs ($C000-$FFFF)">
	<desc>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>
     <subsection toc="orig" name="Original ROMs ($C000-$FFFF)">
	<desc>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>
  </section-->

        <!--driver>
                <name>Simple test suite</name>
                <desc>These tests test the basic functionality of the board, and also do some timing
                        measurement to actually see if the access is fast or not.
                        Note that these tests are small as I had to enter them with the hex editor.
                        Simply assemble them with the <code>xa</code> cross assembler with the <code>-w</code>
                        switch to allow 65816 code.
                <div class="rightimg">
                        <a href="csa_nobogus.png"><img width="200px" src="csa_nobogus.png"/></a><br/><b>Remove bogus accesses</b>: Screenshot of a timing measurement. On the top of the screen you see the result of the original speed, then POKEing to ignore bogus CPU accesses and measuring again. See about 14% speed increase.
                        </div>
                </desc>
                <file ltype="driver" ptype="a65" note="copies all of the lowest 64k but the I/O area onto itself, so it is automatically written to fast RAM ">test1.a65</file>
        </driver-->
        <rev>
                <version>1.0B</version>
                <status>not working</status>
                <note type="stop">
			This is an example of how not to do it. The schematics sport an own 
			adder resp. incrementer for each address, load and store, and the increment value.
			The board layout shows why I decided to start from scratch - no way to route this
			on a two-layer Eurocard PCB. 
                </note>
		<note type="msg">
			The board was supposed to have a daughter board with exchangeable logic 
			to implement transparent DMA - hiding the DMA accesses in the bogus cycles
			between the valid CPU access cycles. That's what the TDMA connector was for.
			Looking at the discussions about how the CPU handles interrupts (they start
			after the opcode fetch, so you'd have to monitor either writes or the interrupt
			line as well) I decided to skip this feature. This also removed the need to
			read the counter register.
		</note>
                <file ltype="schem" ptype="esch">csa_blitter-v1.0b.sch</file>
                <file ltype="schem" ptype="png">csa_blitter-v1.0b-sch.png</file>
                <file ltype="layout" ptype="png">csa_blitter-v1.0b-brd.png</file>
        </rev>

  <closing>
@FOOTER@
  </closing>
</webpage>
