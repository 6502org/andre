<?xml version="1.0"?>
<webpage name="Xilinx tools">
	  <author>
		      <name>Andr&#233; Fachat</name>
		          <email>@EMAIL@</email>
			      <homepage>@WEBROOT@</homepage>
        </author>
	<keywords>Xilinx programmable-logic CPLD FPGA programmer</keywords>
	<lastmodified>2010-04-11</lastmodified>
	<overview><p>
		In my newest designs (for example the <a href="../../csa/cpu816v2/index.html">CSA 65816 CPU V2</a> I 
		started to use programmable logic from Xilinx, especially a CPLD - 
		<a class="extlink" href="http://www.wikipedia.org/wiki/CPLD">Complex Programmable Logic Devicei</a>.
		</p><p>
		When I started to work on that, I had to decide which manufacturer to use. Unfortunately in the
		area of CPLDs or FPGAs, there are no manufacturer-independent standards in the sense that you
		could simply replace an FPGA from one manufacturer with one from another manufacturer.
		Possible manufacturers are <a class="extlink" href="http://www.xilinx.com">Xilinx</a>,
		<a href="http://www.lattice.com">Lattice</a>, <a href="http://www.atmel.com">Atmel</a>, 
		<a href="http://www.altera.com">Altera</a>, and possibly others.
		Therefore I was looking around and, depending on availability (at my favourite parts suppliers)
		and the licencing and availability of a free development environment, I decided to use the Xilinx
		versions, as they were still availably in 5V, through-hole parts, and the ISE Webkit was available
		for free, without any relicensing every year involved (at least from what I understand).
		</p>
	</overview>
	<toc/>
	<section toc="dev" name="Development environment">
		<desc><p>The Xilinx devices can be programmed with the ISE Webpack. You need to register
				with Xilinx though, to be able to download it.
				The Webpack is available for Windows and Linux.
				</p><p>
				I wanted to do everything on Linux, so I first installed the Linux version only.
				I soon found out that to program the devices, the Webpack needed some custom drivers,
				which did not work under my SuSE Linux 11.2 (current version as I write this).
				I then also installed the Windows version, and was able to test-program a CPLD device.
				</p><p>
				In the meantime, however, I have found the libusbdriver code (link below) for Linux
				that I compiled and installed, and now I can easily programm the devices on Linux and
				hope not to need Windows again here!
		</p></desc>
		<extlink name="ISE Webpack download site at xilinx" link="http://www.xilinx.com/support/download/index.htm"/>
		<extlink name="libusbdriver Driver for Xilinx JTAG tools" link="http://www.rmdir.de/~michael/xilinx/"/>
	</section>
	<section toc="prog" name="Programmer">
		<desc><p>Once you have created the CPLD code, you need to program it into the device. The standard
				CPLDs provide an in-system-programming port that you can connect to with a 6-pin cable.
				But where to connect it on the PC side? As usual, there are solutions for the printer port
				as well as USB. I built myself a "Parallel cable III" clone.
				</p><p>With this cable you are restricted to 200kHz clock while transferring the data,
				but the cable is cheap (2 74HC125 plus some resistors and capacitors).
			</p>
		</desc>
		<extlink name="Xilinx parallel cable III" link="http://www.xilinx.com/itp/3_1i/data/common/hug/chap01/hug01005.htm"/>
		<extlink name="Schematics for my Programmer cable (page is in German)" link="http://www.ulrichradig.de/home/index.php/cpld/basekit_xilinx_cplds"/>	
	</section>
	<section toc="vhdl" name="VHDL">
		<desc><p>The Xilinx tools allow you to use different methods of programming.
				One is using a schematics editor, to program the device like you would draw a normal schematics. Other possibilities are VHDL and Verilog.
				</p><p>I chose VHDL, as it supposedly has a stricter type system. I want my designs to "fail fast", as the later you find a bug, the higher the cost and a strict type system helps to find problems earlier in the design process.
				</p><p>
		</p></desc>
	</section>
		<section toc="lessons" name="Lessons learned">
			<desc><p>
					Nevertheless there are some lessons learned which I'll describe in the next sections.
			</p></desc>
			<subsection toc="hwclose" name="Close to hardware...">
				<desc><p>In the beginning I wrote some simple code that just didn't want to compile.
						What I finally found out is that I tried to modify a signal in two processes.
						That does not work, as after all, the CPLD is still some hardware design and
						the code needs to be compiled into the CPLD.
						</p><p>
						So to program a CPLD it is important to know that the code basically has to fit
						into a large array of D-Registers (one half of a 7474 basically) with some kind
						of GAL-like logic arrays in between.
						I.e. each signal is basically produced by a D-register with a flank-triggered 
						input and asynchronous set- and reset-inputs. Then it automatically becomes
						clear that a signal can only depend on a <em>single</em> "flank" of another 
						signal.
						</p><p>
						When you keep this in mind, you automatically write design the system 
						with a much higher chance that it works :-)
					</p>
				</desc>
			</subsection>
			<subsection toc="iobus" name="Not everything works right...">
				<desc><p>With a new technique there comes a learning curve. I found that out when I 
						tried to implement a data bus interface for the 65816 card's control register.
						The bus is a bidirectional pin, and I could use it as input as well as 
						output in VHDL, I could even set it to high impedance all right, all without
						any warning from the Webpack (at least none that I found).
						</p><p>
						However, when I measured the data bus lines, it seemed as if two ICs would
						be fighting each other. Instead of &gt;3V high level, I had less than one
						Volt. And the data bus driver as well as the CPLD were slowly getting 
						hotter. 
						</p><p>
						Obviously the CPLD was pulling down the data bus lines all the time, and the
						high impedance setting didn't have any effect (I controlled the code path
						with a diag pin and it was ok). When I removed the part that allowed to
						read the register, the system suddenly started to work!
						</p><p>
						I don't know yet what was wrong here, if I used the wrong VHDL data type, 
						or the CPLD simply can't do this combination of input and output with high
						impedance on the same pin.
				</p></desc>
			</subsection>
			<subsection toc="diag" name="A diagnostics pin helps...">
				<desc><p>I found that reserving one pin for diagostics and then in VHDL setting this
						pin in those parts I wanted to debug helped a lot in finding out
						what was actually happening in the chip.
				</p></desc>
			</subsection>
		</section>
  <closing>
	  @FOOTER@
    </closing>
</webpage>
