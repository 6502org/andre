<!DOCTYPE webpage [ <!ENTITY eacute "&#233; "> ]>
<webpage name="Commodore PET ROM descriptions">
  <author>
    <name>Andr&eacute; Fachat</name> 
    <email>@EMAIL@</email>
    <homepage>@WEBROOT@</homepage>
    <yearstart>1998</yearstart>
    <yearend>2013</yearend>
  </author>
  <keywords>Commodore PET CBM ROM</keywords>
  <metadesc>Commodore PET CBM ROM descriptions</metadesc>
  <overview><p>This page describes the different ROM versions.
	There are basically three parts of each ROM set - for the BASIC ROM version
	and for the so-called editor ROM, and then the kernal.
	</p>
  </overview>
  <news>
    <item date="2019-09-29">
	Added info about the garbage collection and other differences.
    </item>
    <item date="2016-04-24">
	Updated and added 6540 links.
    </item>
    <item date="2013-01-04">
	Added the section about the BASIC differences
    </item>
    <item date="2011-06-04">
	Added links section and to create your own MS Basic, and BASIC as scripting language
    </item>
    <item date="2010-08-28">
	Added links to history of MS BASIC and Bill Gates' programming tricks.
    </item>
  </news>
  <toc/>

  <section toc="hist" name="Commodore BASIC history">
    <desc><p>The Commodore BASIC was originally created by Microsoft, and bought by 
	Commodore for the use in the KIM and PET computers. The original 6502 BASIC
	was, according to pagetable's analysis, a direct port from the Microsoft 8080 BASIC. 
	It was very generic and for example asked for screen width and memory size on startup.
	It has since then proliferated into "virtually every 6502-based computer",
	including the Commodore, the Apple-II or Atari series.
	</p><p>
	It found its first use in the Commodore BASIC 1 - as found in the 
	original ROMs. In the adoption process Commodore added commands like "OPEN" and other file I/O
	commands, and also renamed the "OK" prompt to "READY.". They also did some "in place"
	binary patching to work around bugs that.
	</p><p>
	Commodore adopted a later version of the BASIC even for the KIM-1. The first KIM, however,
	were shipped with an early version of the 6502 with a buggy "ROR" instruction. So the KIM
	BASIC worked around the broken "ROR" bug.
	</p><p>
	Microsoft later incorporated such changes as well. Commodore went back to Microsoft
	for an update. In that process Microsoft created the famous "WAIT6502,x" Easter Egg 
	in the BASIC2 version.
	A comment in the pagetable's MS BASIC history is supposed to be by Bill Gates and says 
	he put the WAIT easter egg there himself (I'd take that with a grain of salt though).
	</p><p>
	Anyway, the link below is a great analysis of the different MS BASIC versions,
	including the versions for Apple and Altair and how they relate to each other. 
	</p><p>
	In another link it is discussed whether Bill Gates could write code. In fact I believe
	he could. To understand the next part you have to know that the ROM contains the BASIC -
	as written by Microsoft - but also the operating system "kernal" - written by 
	Commodore and used by the BASIC for input/output.
	</p><p>
	The Commodore (MS) BASIC actually uses the "BIT ABS" opcode often to hide a 
	two-byte opcode in the ABS operand. That was also in the Altair's 8080 BASIC version
	written by Gates. The (Commodore) kernal did not use this technique, at least not in
	the first version.
	In fact it could even be his influence that this technique was later used even in the 
	Commodore kernal. Here's one example:
	</p><p>
	The "BASIC 1" kernal uses
	<pre>
 F0B6  A9 40     TALK       LDA #$40      
 F0B8  D0 02                BNE ATNOUT    
 F0BA  A9 20     LISTEN     LDA #$20      
 F0BC  48        ATNOUT     PHA           
	</pre>
	while the "BASIC 4" kernal uses
	<pre>
 F0D2	TALK	LDA #$40
 F0D4		.byte $2C	; BIT $20A9	note: the "LDA #$20" is hidden in the operand!
 F0D5	LISTEN	LDA #$20
 F0D7	ATNOUT	PHA
	</pre>
	I didn't do a further thorough research though.
	</p>
    </desc>
	<extlink name="Create your own version of MS BASIC" link="http://www.pagetable.com/?p=46">
		Pagetable's combined BASIC source code, with switches to create Commodore BASIC 1,
		2, AppleSoft II and other variants.
	</extlink>
	<extlink name="Working around a broken ROR" link="http://www.pagetable.com/?p=45">
		Quizzing about differences in BASIC versions...
	</extlink>
	<extlink name="Bill Gates' Personal Easter Egg in MS BASIC - Pagetable's MS BASIC history" link="http://www.pagetable.com/?p=43">
		Musings about the WAIT6502 easter egg in Commodore BASIC.
		Note one of the commenters...
	</extlink>
	<extlink name="Could Bill Gates write code?" link="http://www.theregister.co.uk/2001/05/15/could_bill_gates_write_code/"/>
	<extlink name="MS BASIC as scripting language" link="http://www.pagetable.com/?p=48">
	</extlink>

  </section>

  <section toc="main" name="Differences in Software">
    <desc>
<P>
Basically there are three different ROM versions that came with the
PET computers, the original ROMs, the upgrade ROMs and the 4.0 ROMs.
Here are some of the peculiarities of the different ROM versions.
(I wished I had more about that; see also the <A HREF="links.html#petfaq">petfaq</A>
file)</P>
<P>ROM images can be found in
<A class="extlink" HREF="@CBMARC@/firmware/computers/pet/">the CBM archive</A></P>
<P>A reverse engineered BASIC source code for versions 1,2 and 4 can be found in the <A HREF="@CBMARC@/src/pet/index.html">CBM archive</A>.</P>
    </desc>
     <subsection toc="orig" name="Original ROMs ($C000-$FFFF)">
	<desc><p>
Original ROMs, from $c000, powers up <CODE>*** COMMODORE BASIC ***</CODE>.
To be found in the calculator-style keyboard machines. Horribly broken,
especially the IEEE488 did not work. The
very low level routines worked, but on top of that a lot had to be fixed.
(Note: the VICE emulator includes a patch that allows you to use the BASIC1 ROMs with the IEEE488 disks)
In upper/lower case character mode (as opposed to upper case/graphics mode)
the upper and lower characters were exchanged (SHIFT for lower case).
Arrays could only be 256 elements in size.
There are a lot of other bugs...
	</p><p>
Note that these ROMs had a kind of copy protection: the BASIC PEEK function could
not read out the actual ROM values...
	</p>
	</desc>
	<extlink name="Original ROMs disassembly" link="@CBMARC@/firmware/computers/pet/d/rom-1.html"/>
     </subsection>

     <subsection toc="upgrade" name="Upgrade ROMs ($C000-$FFFF)">
	<desc><p>
	The `upgrade ROMs' were also known as 2.0 or 3.0 ROMs. Start at $c000, power
up <CODE>### COMMODORE BASIC ###</CODE>
Fix a lot of bugs and make IEEE488 work. Also adds a tiny machine monitor.
Those ROMs have most bugs fixed, although there seem to be different levels
of bug fixing (the
<A class="extlink" HREF="links.html#prodlist">products list</A>
says something about ROM versions 2.0-2.3).
Try and enter "WAIT 6502,1"...
</p>
	</desc>
     </subsection>

     <subsection toc="basic4" name="4.0 ROMs ($B000-$FFFF)">
	<desc><p>
Power up with <CODE>*** COMMODORE BASIC 4.0 ***</CODE>.
The 4.0 ROMs add the so-called DISK-BASIC with disk operation commands
(DLOAD, DSAVE, COPY, SCRATCH, DS$ for the error channel etc). The editor
ROM still differs from small screen and large screen versions (board #2 and
boards #3 and #4)...
	</p>
	</desc>
	<extlink name="4.0 ROMs disassembly" link="@CBMARC@/src/pet/pet_rom4_disassembly.txt"/>
	<extlink name="4.0 ROMs memory map" link="http://www.zimmers.net/cbmpics/cbm/PETx/petmem.txt"/>
     </subsection>

     <subsection toc="gc" name="Garbage Collection">
	<desc><p>
		The original BASIC garbage collection was horribly slow. Only with BASIC 4 the garbage collection
		was optimized. Olaf Seibert writes on the CBM-hackers list:
	</p>
<pre>
The string garbage collection in the "new ROMs" and the 64 is quadratic
in the number of strings that need to be retained.

Variables are stored in records of 7 or so bytes. 2 for the name and I
think 5 for the value (the space needed for a floating point variable).
Strings had the address to where the actual string text was stored,
between the BASIC program and the top of memory. I think that only in
string arrays, the wasted space was eliminated.

For garbage collection, it would proceed like thus.
To start, it would set the top of used memory to the end of the BASIC
program.
It would make a pass through all string variables and arrays to check
which string variable's string was stored the lowest in memory.  If that
left any room between there and the top of used memory, the space in
between could be reclaimed, by moving the string down (and adjusting the
variable record). Then the top of used memory would be set to the end of
the string, and repeat. If there are N string variables it would need N
passes through them to check each of them.

The change in BASIC 4.0 is that every stored string would have a pointer
back to its variable record (probably also a string length). That way
you can just go once through the stored strings. If the back pointer
points to a record which in turn points back to the string, it is still
in use. If not, it is unused and can be reclaimed. Used strings get
moved down to the top of used memory (if needed) (and the variable
record gets adjusted) and unused ones just get skipped. This needs just
one pass through the stored strings (garbage and to keep).
</pre>
	</desc>
     </subsection>

     <subsection toc="history" name="ROM History">
	<desc><p>The BASIC ROM is subject to evolutionary changes, and
		finding the steps and the order they occurred in is
		difficult. Here are some links with more information 
		on it.</p>
	</desc>
	<extlink name="CBM-II BASIC ROM" link="https://www.davidviner.com/cbm9.html">This has source code with version information
		back to BASIC 1</extlink>
	<extlink name="Original MS BASIC" link="http://www.pagetable.com/?p=774"/>
     </subsection>
  </section>

  <section toc="editor" name="Editor ROM">
	<desc><p>
In addition to the BASIC (including the kernel)
there are different `editor' ROMs. Those ROMs occupy $e000-$e800
and contain (in the 4.0 ROMs) the screen handling routines. The 4.0 ROMs
can be found in machines with and without CRTC, so they had different
editor ROMs. Also the business and graphics keyboard differ in layout,
so these editor ROMs differ too. The changes for business and graphics
layout in the upgrade ROMs are in $e000-$e800 too.
Later on there were nationalized keyboard versions with additional
ROM in $e900-$efff. In fact the so-called 50Hz and 60Hz versions
have different keyboard layouts and thus different editor ROMs.
</p><p>
For keyboards please have a look at <A HREF="keyboards.html">keyboards</A>
section.
	</p></desc>
  </section>

   <section toc="charrom" name="Character ROM">
	<desc><p>
	The character ROM is the ROM that is used to produce the characters on
the screen. Therefore the scan line number (0-7) is used as address for
the ROM (A0-2), then the 7 lower bits of the byte read from the screen
memory (A3-A9), then the VIA CA2 line as switch between upper/lower
case mode and upper case/graphics mode (A10). This gives a charrom
size of 2k.
</p><P>
You will notice that the highest data bit of the character read from
the screen RAM is not yet used. It is instead directly fed to an
exclusive-OR gate to invert the pixel stream from the character shift
register. This inverts the character by hardware.
</P><p>
The newer models have another line from the CRTC to the character ROM,
namely CRTC MA13 is used as A11 for the charrom. With this line
you can switch to a completely different character set in the charrom.
I assume this is used in nationalized machines with different charsets.
</p></desc>
  </section>

  <section toc="hardware" name="ROM ICs">
	<desc><p>The ROMs of the early boards came with 6540 ICs from Commodore as ROMs
	Those are completely deprecated. Matthew D'Asaro has written an article on them
	and how to replace them with modern chips</p>
	<p>Others have done similar adapters.</p></desc>
	<extlink name="6540 ROM adapter by Matthew D'Asaro" link="http://www.dasarodesigns.com/product/6540-rom-adapter/"/>
	<extlink name="Other 6540 ROM adapters (see links on page as well)" link="http://forum.classic-computing.de/index.php?page=Thread&amp;threadID=4369"/>
  </section>

  <section toc="links" name="Links">
  	<desc>This section contains links concerning Commodore (MS) BASIC and kernal ROMs</desc>
	<extlink name="Commodore BASIC as Unix/Windows scripting language" link="http://www.pagetable.com/?p=48"/>
  </section>

  <closing>
@FOOTER@
  </closing>
</webpage>
