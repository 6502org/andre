<!DOCTYPE webpage [ <!ENTITY eacute "&#233; "> ]>
<webpage name="CRTC operation">
  <author>
    <name>Andr&eacute; Fachat</name> 
    <yearstart>1998</yearstart>
    <yearend>2010</yearend>
    <email>@EMAIL@</email>
    <homepage>@WEBROOT@</homepage>
  </author>
  <keywords>CRTC 6545 6845 operation</keywords>
  <metadesc>CRTC operation</metadesc>
  <overview>
<P>The 6545/6845 Cathode Ray Tube Controller (CRTC) is a flexible
video chip. It has been used in the Commodore PET computers,
and even early PC graphics cards.
</P>
<P>
For the operation of the video interface Commodore introduced the
Cathode Ray Tube Controller (CRTC) 6545 with the third type of boards.
This controller is very flexible, programmable and provides all
necessary interface signals for the video hardware.
</P>
<P>I have made a collection of test programs and timing
examples for the CRTC in my CBM 8296. You can download the whole
suite, including a (derived) diagram of the CRTC internals from the CBM archive
as
<A HREF="@CBMARC@/pet/programming/index.html">crtctest-1.1.tar.gz</A>.
It also includes a summary of the differences of the various
CRTC models.
You can have a look at some of the weird screen distortions in
the <A HREF="pet/index.html">test program documentation</A>, and an
overview over the derived CRTC internals on
<A HREF="internals/index.html">this page</A>
(all from the crtctest archive).
</P><P>A sample schematic can be found on the
<A HREF="http://www.6502.org/users/andre/csa/">CS/A65</A>
computer page or in the PET schematics on the
<A HREF="../../petindex/links.html">links page</A> of the PET index.
</P>
  </overview>
  <!--news>
    <item date="">
    </item>
  </news-->
  <toc/>
  <itemlist name="General Description" toc="desc">
    <desc>
<P>
The CRTC has a bus interface compatible to the 6502 bus system,
using only two addresses.
</P><P>
The first address doubles as address register when writing and as 
status register when reading. I.e. reading the status register at
address 0 gives the internal status of the CRTC as described below.
Writing to the address register at address 0 links the value register
at address 1 to the corresponding register in the internal register file.
</P><P>
Writing the index number of the internal CRTC register file to the
address register provides access to the corresponding register
in the register file. I.e. to write #13 to register #6 you have to
store 13 to the address register and then 6 to the value register.
This procedure is the same for all registers (except of course the status
register).
Therefore all mentionings of "register" (except for the status) 
will in the following
denote internal CRTC register numbers, the value you write to the
address register.
</P>
<P>The video interface consists of the Memory Address lines MA0-13,
the Row Address lines RA0-4, Display Enable DE, Cursor Enable CE,
and Vertical and Horizontal Sync outputs. Only inputs are the /RESET
line that clears all counters (providing a sort of synchronisation
method), the Light Pen Strobe and the Character Clock CCLK.
</P>
<P>
There are several modes of operation for the CRTC available, but I
will only go into the most common one, which is also used in the
PET line of computers, the normal non-interlaced
sync mode.
</P>
    </desc>
     <subsection name="Status Register" toc="sr">A
	<desc>
	The status register can be read by the CPU at CRTC address 0
	and is thus not part of the internal CRTC register file
	but can be read by the CPU at any time.
<PRE>
Bit     Description
----------------------------------
 7      UR - Update ready (Rockwell R6545 only)
          0     Register 31 has been either read or written by the CPU
          1     an update strobe has occured
 6      LRF - LPEN Register Full 
          0     Register 16 or 17 has been read by the CPU
          1     LPEN strobe has occured
 5      VRT - Vertical retrace 
          0     Scan is currently not in the vertical blanking position
          1     [MOS6545] Scan is currently in its vertical blanking time 
          1     [R6545] Scan is currently in its vertical re-trace time.
                   Note: this bit goes to a 1 one when vertical re-trace starts.
                   It goes to a 0 five character clock times before vertical
                   re-trace ends to ensure that critical timings for refresh
                   RAM operations are met.
</PRE>
Please note that the UR is not available on all models, and VRT bit is handled 
differently by different models. 
	</desc>
     </subsection>
     <subsection name="Timing" toc="timing">
      <desc>
<P>
The word <EM>Line</EM> in a video context can have two meanings: The
line of characters being displayed as text or a rasterline.
A rasterline is a horizontal line of pixels that can either be
black or white (or on or off, or in newer systems have <EM>one</EM>
color). A character line consists of several rasterlines, i.e. all
characters in one line have the same height.
</P><P>
The horizontal (line-) timing is determined by the character clock
(that defines the length of one character and in which all line
timing is measured) and the following registers:</P>
<PRE>
R0   Horizontal Total Reg.           total length of line (displayed
                                     and non-displayed cycles (retrace)
                                     in CCLK cylces minus 1
R1   Horizontal Displayed Reg.       number of characters displayed in a
                                     line 
R2   Horizontal Sync Position Reg.   The position of the horizontal sync
                                     pulse start in distance from line
                                     start
R3   Sync Width Reg. (Bits 0-3)      The width of the horizontal sync
                                     pulse in CCLK cycles (0 means 16)
</PRE>
<P>
This allows a very flexible rasterline timing .
Changing the value of R2 (Sync Position) shifts
the video image to the left or right. Here is an example of the line
timing (assuming a fictional 40 column line):
</P>
<PRE>

CCLK cycle #   0000000000111111 .... 3333344444444445555555555
               0123456789012345 .... 5678901234567890123456789
                _________________  _______
Display Enable_|                          |___________________|
                                          ^ R1 = 40           ^ R0 = 59
                                                _______
HSync          __________________  ____________|       |______

                                               &lt;-------&gt; R3 = 8
                                               ^
                                                R2 = 45
</PRE>
<P>
During the scanline the MA0-13 address lines present the CRTC memory
address of each character displayed, i.e. in the first CCLK cycle
the memory address of the start of the line is presented, and for
each following CCLK cycle the MA0-13 address lines are increased
by one. Memory addresses are only valid, to be displayed addresses
when the Display Enable signal is active (high).
</P><P>
A character line now consists of a number of scanlines
</P>
<PRE>
R9   Maximum Scan Line Address Reg.  Number of scanlines per character
                                     minus 1
</PRE>
<P>
As each scanline of one single character line should read the
character value from the same position in memory, the address
shown on the MA0-13 lines repeat each other for each scanline.
Therefore the same memory location is being read.
</P><P>
To display different lines on screen the Row Address lines RA0-4
are used. They give the number of the scanline within the current
character line. Thus by selecting a different character to raster
translation with the RA0-4 lines the correct raster will be displayed
for each rasterline of a character line.
</P>
<PRE>
rasterline  RA0-4  MA0-13
----------  -----  ------
   0         0       0, 1, 2, 3, 4, 5, 6, ...
   1         1       0, 1, 2, 3, 4, 5, 6, ...
   ...
   7         7       0, 1, 2, 3, 4, 5, 6, ...
   8         0      40,41,42,43,44,45,46, ...
   ...
   15        7      40,41,42,43,44,45,46, ...
   16        0      80,81,82,83,84,85,86, ...
   ...
</PRE>
<P>
After each character line the start of line character memory address
is increased by the value of R1, Horizontal Total Displayed.
For the first character the start of line character memory address
is loaded from
</P>
<PRE>
R12  Start Address Reg. H (bit 0-5)  Bits 8-13 of the start of display
                                     memory address
R13  Start Address Reg. L            Bits 0-7 of the start of display
                                     memory address
</PRE>
<P>
To control the vertical timing there are other registers
</P>
<PRE>
R4   Vertical Total Register         The number of character lines
                                     of the screen minus 1
R5   Vertical Total Adjust Reg.      The additional number of scanlines
                                     to complete a screen
R6   Vertical Displayed Reg.         Number character lines that are
                                     displayed
R7   Vertical Sync Position Reg.     Position of the vertical sync pulse
                                     in character lines.
R3   Sync Width Reg (Bits 4-7)       length of vertical sync pulse in
                                     times of a rasterline
</PRE>
<P>
Those registers make up a similar timing as the horizontal timing.
In the offscreen area (i.e. character line beyond R6) the Display
Enable signal is set inactive all the time.
Only R5 still needs to be explained. To allow a finer adjustment of the
screen length than by the number of character lines (R4), R5 adds
a number of blank scanlines at the end of the screen timing.
</P>
<P>
After the number of rasterlines (as given by R4 and R5) is displayed
all counters are reset, the start of line character memory address
is reset to the value of R12/R13 and the whole thing starts again.
</P>
      </desc>
     </subsection>
     <subsection name="Cursor Control" toc="cursor">
      <desc>
<P>
The CRTC can generate a hardware cursor signal
</P>
<PRE>
R14  Cursor Reg. H                   Bits 8-13 of the memory address
                                     where Cursor Enable should be
                                     active
R15  Cursor Reg. L                   Bits 0-7 of the Cursor Enable
                                     memory register
R10  Cursor Start Reg.               Bits 0-4 start scanline of cursor
                                     Bits 6,5:
                                          0  0    non-blink
                                          0  1    Cursor non-display
                                          1  0    blink, 1/16 frame rate
                                          1  1    blink, 1/32 frame rate
R11  Crusor End Reg.                 Bits 0-4 last scanline of cursor
</PRE>
<P>
The Cursor Enable signal (CE) is active when the memory address
lines MA0-13 match the number set in R14/R15, and the scanline of the
character is in the range of R10/R11 and a valid active cursor
mode is selected.
</P>
      </desc>
     </subsection>
  </itemlist>
  <itemlist name="Example CRTC use in the Commodore PET" toc="pet">
      <desc>
<P>
There are a few things that might be different from other implementations
in the PET. The CRTC has been used in 40 columns and 80 columns models.
The CCLK frequency however is 1 MHz in both cases. 80 columns mode
is achieved by reading not one byte but two byte in each CCLK
cycle with the same
MA0-13, thus effectively using the MA0-9 as A1-10.
</P>
<P>
As only MA0-9 are used, Commodore decided to use the uppermost two
bits (MA12 and MA13) as additional control lines. MA12 is used
to invert the complete pixel stream video output, probably to be able
to cope with different video hardware. MA13 is used as an additional
A11 to switch the 2k halfs of a newer 4k charrom. This is used
for nationalized character sets?
</P>
<P>
Only seven bit of the data read from memory are used for character
ROM addressing. The 8th bit is instead directly fed to an inverter,
inverting the pixel stream if set - thus inverting the character.
</P>
<P>
The Cursor hardware is not used.
</P>
<P>
If more than 8 scanlines per character are used the hardware automatically
blanks the scanlines for the scanlines beyond the 8th.
Without that and only RA0-2 used for character ROM address the
same character would be redisplayed from the start.
</P>
    </desc>
	<subsection name="PET 4032 'Fat40'" toc="fat40">
	<desc>
<P>The so-called 'Fat40' is a 4032 model that has a 12&quot; screen
and a "universal board" - a board that can be used for the 8032 or the
4032. Thus it uses the CRTC as video chip. A separate static memory
separate from main memory is used as video RAM.
</P>
<PRE>
PET 4032 CRTC usage block diagram
---------------------------------


                |               CRTC                                                      |
                ---------------------------------------------------------------------------
           MA0-9  |                              RA0-2 |    -------                   DE|
                  |                                    |    |     |                     |
                  |  -----      -------                -----|A0-2 |      -----          |  ---
                  |  |   |      |     |       -----         |     |D0-7  |   |     ---  +--| | Video
                  +--|   | A0-9 |     | D0-7  |   |    D0-6 |     |------|   |-----| |     |&gt;|---
                     | &gt; |------| RAM |---+---|   |---+-----|A3-8 |      |   |     | |-----| |
 CPU A0-9 -----------|   |      |     |   |   |   |   |     |     |      -----   +-| |     ---
                     |   |      |     |   |   -----   |     -------      shift   | ---      AND
                     -----      -------   |   Latch   |     Charrom     register |  XOR
                   Mux 2-to-1             |           |D7                        |
                                          |           +--------------------------+
                     -----                |
                     |   |                |
 CPU D0-7 -----------|   |----------------+
                     |   |
                     -----
                    Buffer
</PRE>
<P>
During Phi2 low (Processor does not use the bus) the Mux chip selects
the MA0-9 address lines from the CRTC. The video RAM then outputs the
character value and it is saved in the latch. The latch output is then
used as input for the Charrom. The output of which is given to the
shift register that makes a pixel stream rather than a byte stream.
</P>
<P>
When Phi2 is high then the Mux selects the CPU address lines for the
video RAM, allowing normal CPU memory accesses.
</P>
<P>
The Vertical Sync signal of the CRTC is not only used for video
hardware control but it is also (inverted and) connected to the
PIA1 CB1 line to
generate system interrupts with the frame rate. Also the state
of this line can be checked with VIA PB5.
</P>
	</desc>
	</subsection>
	<subsection name="PET 8032" toc="8032">
	<desc>
<P>The universal board can also be used in the 8032. As the 8032 also
runs on 1MHz only, there is a problem with the memory bandwidth.
The memory used was static RAM with a maximum access frequency of
2MHz. As half the cycles were reserved for the CPU (Phi2 high),
only 1MHz video RAM bandwidth was left, which is only enough for
40 columns a line - with an 8 bit graphics data bus.
</P><P>In the 8032, however, Commodore decided to use a 16 bit
graphics data bus. How does this work? The video memory is separated
into to areas of 1kByte each, that the CPU can write to independetly
with 8 bit access. One area is for even addresses, the other for
odd CPU memory addresses. The video circuitry, however, reads both
the RAM areas at the same time (thus twice 8bit = 16bit access), and
latches both values. To generate the video signal than first the
value from the even area, then the one from the odd area is used.
</P>
<PRE>
PET 8032 CRTC usage block diagram
---------------------------------


                |               CRTC                                                        |
                -----------------------------------------------------------------------------
           MA0-9  |                                RA0-2 |    -------                   DE|
                  |                                      |    |     |                     |
                  |  -----      -------         even     +----|A0-2 |      -----          |  ---
                  |  |   |      |     |         -----         |     |D0-7  |   |     ---  +--| | Video
                  +--|   | A0-9 | even| D0-7    |   |    D0-6 |     |------|   |-----| |     |&gt;|---
                     | &gt; |---+--| RAM |---+-----|   |-+-+-----|A3-8 |      |   |     | |-----| |
 CPU A0-9 -----------|   |   |  |     |   |     |   | | |     |     |      -----   +-| |     ---
                     |   |   |  |     |   |     ----- | |     -------      shift   | ---      AND
                     -----   |  -------   |     Latch | |     Charrom     register |  XOR
                      Mux    |            |           | |  D7                      |
                     2-to-1  |            |           | +--------------------------+
                             |  -------   |      odd  |
                             |  |     |   |     ----- |D0-7
                             |  | odd |   |     |   | |
                             +--| RAM |--/|\-+--|   |-+
                                |     |   |  |  |   |
                                |     |   |  |  -----
                     even       -------   |  |  Latch
                     -----                |  |
                     |   |                |  |
 CPU D0-7 ------+----|   |-----------------  |
                |    |   |                   |
                |    -----                   |
                |     odd                    |
                |    -----                   |
                |    |   |                   |
                -----|   |-------------------+
                     |   |
                     -----
                     Buffer
</PRE>
<P>This diagram shows how the RAM and latches are doubled for even and odd addresses.
It also makes it clear that it is a relatively simple addition to the 4032 to display
80 columns. This is one reason why universal boards are actually feasible.
</P><P>This setup also explains why even the 80 columns PET actually initialize the
CRTC video chip with 40 columns - as the video RAM bus width is 16bit instead of 8bit,
each of the CRTC character actually is two characters on the screen.
</P>
	</desc>
	</subsection>
	<subsection name="PET 8296" toc="8296">
	<desc>
<P>The 8296 is a different beast altogether. Here the separate static video memory is
completely gone. All the memory of the system (actually 128k, of which 96k can be
used as main memory and 4k as video memory) is put into two dynamic RAM banks of
64k each.
</P>
<PRE>
PET 8296 CRTC usage block diagram
---------------------------------


                |               CRTC                                                        |
                -----------------------------------------------------------------------------
           MA0-9  |                                RA0-2 |    -------                   DE|
                  |                                      |    |     |                     |
                  |  -----      -------         even     +----|A0-2 |      -----          |  ---
                  |  |   | DRM  |     |         -----         |     |D0-7  |   |     ---  +--| | Video
                  +--|   | 0-7  | 64k | D0-7    |   |    D0-6 |     |------|   |-----| |     |&gt;|---
                  |  | &gt; |---+--| RAM |---+-----|   |-+-+-----|A3-8 |      |   |     | |-----| |
                  +--|   |   |  |     |   |     |   | | |     |     |      -----   +-| |     ---
                     |   |   |  |     |   |     ----- | |     -------      shift   | ---      AND
                     -----   |  -------   |     Latch | |     Charrom     register |  XOR
                      Mux    |            |           | |  D7                      |
                     2-to-1  |            |           | +--------------------------+
                     -----   |  -------   |      odd  |
                     |   |   |  |     |   |     ----- |D0-7
               +-----|   |   |  | 64k |   |     |   | |
 CPU A0-15 ----+     | &gt; |---+--| RAM |---+-----|   |-+
               +-----|   |      |     |   |     |   |
                     |   |      |     |   |     -----
                     -----      -------   |     Latch
                                          |
                     -----                |
                     |   |                |
 CPU D0-7 -----------|   |-----------------
                     |   |
                     -----
</PRE>
<P>As opposed to static RAM, dynamic RAM requires multiplexed address
lines. Therefore both, the CPU and CRTC address lines are multiplexed
separately with 74ls257 ICs that are enabled only when the CPU or
CRTC respectively accesses the memory.</P>
<P>The diagram shows that now the dRAM address and data lines are
shared between the two 64k memory banks. This means that only one access
can happen at a time. as a result, to display 80 columns, it is necessary
that the memory is accessed faster than 2MHz. In fact it is accessed
faster, with approx. 4Mhz, as can be seen in the description of the UC2
PLA logic equations in <a href="local/8296desc.txt">8296desc.txt</a>.
</P>
	</desc>
	</subsection>
  </itemlist>
  <itemlist name="PET timing examples" toc="pettiming">
	<desc>
<P>
The following table shows some timing examples for the PET CRTC
as well as for a selfbuilt 6502 computer (CS/A65) with a 6545 CRTC.
[Note that the CS/A65 values have been derived by my humble self to interface
my <A HREF="http://www.6502.org/users/andre/csa/index.html">CS/A65</A> computer to a
normal german (PAL, 50Hz) TV set. I derived them by starting from
some guessed values and then trial and error until the TV set sync'd...]
Remember that even for 80 columns the PET use a CCLK of 1 MHz and
double the characters by hardware (i.e. writing 40 to R1).
Interestingly enough the CS/A65 parameter that have been found by
trial and error match the 8032 values quite well.
</P>
<PRE>
                      4032    4032    8032    8032    CS/A65   CS/A65   PAL TV  PAL TV
                      text    graph   text    graph   1 MHz    2 MHz    graph   text
----------------------------------------------------------------------------------------------------------
CCLK rate [MHz]        1       1       1       1       1        2       1       1

R0 (hor. total)        49      49      63      63      63       126     63      63
R1 (hor. displ)        40      40      40      40      40       80      40      40
R2 (hor. sync)         41      41      50      50      50       100     50      50
R3 (syn width)         15      15      8       8       3        6       5       5

R4 (vert. total)       39      49      32      36      41       41      38      33
R5 (vert. adjust)      0       0       16      17      0        0       1       7
R6 (vert. displ)       25      25      25      25      25       25      25      25
R7 (vert. sync)        32      37      29      32      33       33      32      32

R9 (scanlines/char-1)  9       7       8       7       7        7       7       8

time per scanline [us] 50      50      64      64      64       63.5    64      64
scanl./char
 (R9+1)                10      8       9       8       8        8       8       9
time per charline [us]
 (R9+1)*t/scanline     500     400     576     512     512      508     512     576
scanlines total
 (R9+1)*(R4+1)+R5      400     400     313     313     336      336     313     313
time/fram [ms]
 scanl tot. * t/scanl  20.0    20.0    20.0    20.0    21.5     21.3    20.0    20.0
framerate [Hz]
 fram/time             50      50      50      50      47       47      50      50
</PRE>
<div class="rightimg"><a href="CRTC_on_TFT.jpg"><img src="CRTC_on_TFT_small.jpg"/></a><br/>A CS/A video output on a modern 
TFT screen, using composite video using the "PUCOE" circuit.
</div>
<P>The PAL TV values I have derived from the PAL timing standard - 64us per rasterline, 
	313 rasterlines per half-screen (which is simply repeated with the PET). As you
	can see the 8032 values for the 50Hz PET are PAL signal standards. You
	should thus be able to create valid PAL TV composite video signals from the user port (which carries
	the necessary HORZ DRIVE, VERT DRIVE and VIDEO signals - you'd need the 5V VCC from the
	tape drive connector though).
</P>
      </desc>
  </itemlist>
  <disclaimer name="Disclaimer">
	@DISCLAIMER@
  </disclaimer>
  <closing>
	@FOOTER@
  </closing>
</webpage>
